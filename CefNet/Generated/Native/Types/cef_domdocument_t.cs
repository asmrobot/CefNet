// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_dom_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure used to represent a DOM document. The functions of this structure
	/// should only be called on the render process main thread thread.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_domdocument_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// cef_dom_document_type_t (*)(_cef_domdocument_t* self)*
		/// </summary>
		public void* get_type;

		/// <summary>
		/// Returns the document type.
		/// </summary>
		[NativeName("get_type")]
		public unsafe CefDOMDocumentType GetCefType()
		{
			fixed (cef_domdocument_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domdocument_t*, CefDOMDocumentType>)get_type)(self);
			}
		}

		/// <summary>
		/// _cef_domnode_t* (*)(_cef_domdocument_t* self)*
		/// </summary>
		public void* get_document;

		/// <summary>
		/// Returns the root document node.
		/// </summary>
		[NativeName("get_document")]
		public unsafe cef_domnode_t* GetDocument()
		{
			fixed (cef_domdocument_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domdocument_t*, cef_domnode_t*>)get_document)(self);
			}
		}

		/// <summary>
		/// _cef_domnode_t* (*)(_cef_domdocument_t* self)*
		/// </summary>
		public void* get_body;

		/// <summary>
		/// Returns the BODY node of an HTML document.
		/// </summary>
		[NativeName("get_body")]
		public unsafe cef_domnode_t* GetBody()
		{
			fixed (cef_domdocument_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domdocument_t*, cef_domnode_t*>)get_body)(self);
			}
		}

		/// <summary>
		/// _cef_domnode_t* (*)(_cef_domdocument_t* self)*
		/// </summary>
		public void* get_head;

		/// <summary>
		/// Returns the HEAD node of an HTML document.
		/// </summary>
		[NativeName("get_head")]
		public unsafe cef_domnode_t* GetHead()
		{
			fixed (cef_domdocument_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domdocument_t*, cef_domnode_t*>)get_head)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domdocument_t* self)*
		/// </summary>
		public void* get_title;

		/// <summary>
		/// Returns the title of an HTML document.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_title")]
		public unsafe cef_string_userfree_t GetTitle()
		{
			fixed (cef_domdocument_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domdocument_t*, cef_string_userfree_t>)get_title)(self);
			}
		}

		/// <summary>
		/// _cef_domnode_t* (*)(_cef_domdocument_t* self, const cef_string_t* id)*
		/// </summary>
		public void* get_element_by_id;

		/// <summary>
		/// Returns the document element with the specified ID value.
		/// </summary>
		[NativeName("get_element_by_id")]
		public unsafe cef_domnode_t* GetElementById([Immutable]cef_string_t* id)
		{
			fixed (cef_domdocument_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domdocument_t*, cef_string_t*, cef_domnode_t*>)get_element_by_id)(self, id);
			}
		}

		/// <summary>
		/// _cef_domnode_t* (*)(_cef_domdocument_t* self)*
		/// </summary>
		public void* get_focused_node;

		/// <summary>
		/// Returns the node that currently has keyboard focus.
		/// </summary>
		[NativeName("get_focused_node")]
		public unsafe cef_domnode_t* GetFocusedNode()
		{
			fixed (cef_domdocument_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domdocument_t*, cef_domnode_t*>)get_focused_node)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_domdocument_t* self)*
		/// </summary>
		public void* has_selection;

		/// <summary>
		/// Returns true (1) if a portion of the document is selected.
		/// </summary>
		[NativeName("has_selection")]
		public unsafe int HasSelection()
		{
			fixed (cef_domdocument_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domdocument_t*, int>)has_selection)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_domdocument_t* self)*
		/// </summary>
		public void* get_selection_start_offset;

		/// <summary>
		/// Returns the selection offset within the start node.
		/// </summary>
		[NativeName("get_selection_start_offset")]
		public unsafe int GetSelectionStartOffset()
		{
			fixed (cef_domdocument_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domdocument_t*, int>)get_selection_start_offset)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_domdocument_t* self)*
		/// </summary>
		public void* get_selection_end_offset;

		/// <summary>
		/// Returns the selection offset within the end node.
		/// </summary>
		[NativeName("get_selection_end_offset")]
		public unsafe int GetSelectionEndOffset()
		{
			fixed (cef_domdocument_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domdocument_t*, int>)get_selection_end_offset)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domdocument_t* self)*
		/// </summary>
		public void* get_selection_as_markup;

		/// <summary>
		/// Returns the contents of this selection as markup.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_selection_as_markup")]
		public unsafe cef_string_userfree_t GetSelectionAsMarkup()
		{
			fixed (cef_domdocument_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domdocument_t*, cef_string_userfree_t>)get_selection_as_markup)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domdocument_t* self)*
		/// </summary>
		public void* get_selection_as_text;

		/// <summary>
		/// Returns the contents of this selection as text.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_selection_as_text")]
		public unsafe cef_string_userfree_t GetSelectionAsText()
		{
			fixed (cef_domdocument_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domdocument_t*, cef_string_userfree_t>)get_selection_as_text)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domdocument_t* self)*
		/// </summary>
		public void* get_base_url;

		/// <summary>
		/// Returns the base URL for the document.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_base_url")]
		public unsafe cef_string_userfree_t GetBaseUrl()
		{
			fixed (cef_domdocument_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domdocument_t*, cef_string_userfree_t>)get_base_url)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domdocument_t* self, const cef_string_t* partialURL)*
		/// </summary>
		public void* get_complete_url;

		/// <summary>
		/// Returns a complete URL based on the document base URL and the specified
		/// partial URL.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_complete_url")]
		public unsafe cef_string_userfree_t GetCompleteUrl([Immutable]cef_string_t* partialURL)
		{
			fixed (cef_domdocument_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domdocument_t*, cef_string_t*, cef_string_userfree_t>)get_complete_url)(self, partialURL);
			}
		}
	}
}

