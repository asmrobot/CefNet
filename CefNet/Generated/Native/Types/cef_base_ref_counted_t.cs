// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_base_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// All ref-counted framework structures must include this structure first.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_base_ref_counted_t
	{
		/// <summary>
		/// Size of the data structure.
		/// </summary>
		public UIntPtr size;

		/// <summary>
		/// void (*)(_cef_base_ref_counted_t* self)*
		/// </summary>
		public void* add_ref;

		/// <summary>
		/// Called to increment the reference count for the object. Should be called
		/// for every new copy of a pointer to a given object.
		/// </summary>
		[NativeName("add_ref")]
		public unsafe void AddRef()
		{
			fixed (cef_base_ref_counted_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_base_ref_counted_t*, void>)add_ref)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_base_ref_counted_t* self)*
		/// </summary>
		public void* release;

		/// <summary>
		/// Called to decrement the reference count for the object. If the reference
		/// count falls to 0 the object should self-delete. Returns true (1) if the
		/// resulting reference count is 0.
		/// </summary>
		[NativeName("release")]
		public unsafe int Release()
		{
			fixed (cef_base_ref_counted_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_base_ref_counted_t*, int>)release)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_base_ref_counted_t* self)*
		/// </summary>
		public void* has_one_ref;

		/// <summary>
		/// Returns true (1) if the current reference count is 1.
		/// </summary>
		[NativeName("has_one_ref")]
		public unsafe int HasOneRef()
		{
			fixed (cef_base_ref_counted_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_base_ref_counted_t*, int>)has_one_ref)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_base_ref_counted_t* self)*
		/// </summary>
		public void* has_at_least_one_ref;

		/// <summary>
		/// Returns true (1) if the current reference count is at least 1.
		/// </summary>
		[NativeName("has_at_least_one_ref")]
		public unsafe int HasAtLeastOneRef()
		{
			fixed (cef_base_ref_counted_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_base_ref_counted_t*, int>)has_at_least_one_ref)(self);
			}
		}
	}
}

