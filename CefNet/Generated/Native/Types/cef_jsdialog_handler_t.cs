// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_jsdialog_handler_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Implement this structure to handle events related to JavaScript dialogs. The
	/// functions of this structure will be called on the UI thread.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_jsdialog_handler_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// int (*)(_cef_jsdialog_handler_t* self, _cef_browser_t* browser, const cef_string_t* origin_url, cef_jsdialog_type_t dialog_type, const cef_string_t* message_text, const cef_string_t* default_prompt_text, _cef_jsdialog_callback_t* callback, int* suppress_message)*
		/// </summary>
		public void* on_jsdialog;

		/// <summary>
		/// Called to run a JavaScript dialog. If |origin_url| is non-NULL it can be
		/// passed to the CefFormatUrlForSecurityDisplay function to retrieve a secure
		/// and user-friendly display string. The |default_prompt_text| value will be
		/// specified for prompt dialogs only. Set |suppress_message| to true (1) and
		/// return false (0) to suppress the message (suppressing messages is
		/// preferable to immediately executing the callback as this is used to detect
		/// presumably malicious behavior like spamming alert messages in
		/// onbeforeunload). Set |suppress_message| to false (0) and return false (0)
		/// to use the default implementation (the default implementation will show one
		/// modal dialog at a time and suppress any additional dialog requests until
		/// the displayed dialog is dismissed). Return true (1) if the application will
		/// use a custom dialog or if the callback has been executed immediately.
		/// Custom dialogs may be either modal or modeless. If a custom dialog is used
		/// the application must execute |callback| once the custom dialog is
		/// dismissed.
		/// </summary>
		[NativeName("on_jsdialog")]
		public unsafe int OnJSDialog(cef_browser_t* browser, [Immutable]cef_string_t* origin_url, CefJSDialogType dialog_type, [Immutable]cef_string_t* message_text, [Immutable]cef_string_t* default_prompt_text, cef_jsdialog_callback_t* callback, int* suppress_message)
		{
			fixed (cef_jsdialog_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_jsdialog_handler_t*, cef_browser_t*, cef_string_t*, CefJSDialogType, cef_string_t*, cef_string_t*, cef_jsdialog_callback_t*, int*, int>)on_jsdialog)(self, browser, origin_url, dialog_type, message_text, default_prompt_text, callback, suppress_message);
			}
		}

		/// <summary>
		/// int (*)(_cef_jsdialog_handler_t* self, _cef_browser_t* browser, const cef_string_t* message_text, int is_reload, _cef_jsdialog_callback_t* callback)*
		/// </summary>
		public void* on_before_unload_dialog;

		/// <summary>
		/// Called to run a dialog asking the user if they want to leave a page. Return
		/// false (0) to use the default dialog implementation. Return true (1) if the
		/// application will use a custom dialog or if the callback has been executed
		/// immediately. Custom dialogs may be either modal or modeless. If a custom
		/// dialog is used the application must execute |callback| once the custom
		/// dialog is dismissed.
		/// </summary>
		[NativeName("on_before_unload_dialog")]
		public unsafe int OnBeforeUnloadDialog(cef_browser_t* browser, [Immutable]cef_string_t* message_text, int is_reload, cef_jsdialog_callback_t* callback)
		{
			fixed (cef_jsdialog_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_jsdialog_handler_t*, cef_browser_t*, cef_string_t*, int, cef_jsdialog_callback_t*, int>)on_before_unload_dialog)(self, browser, message_text, is_reload, callback);
			}
		}

		/// <summary>
		/// void (*)(_cef_jsdialog_handler_t* self, _cef_browser_t* browser)*
		/// </summary>
		public void* on_reset_dialog_state;

		/// <summary>
		/// Called to cancel any pending dialogs and reset any saved dialog state. Will
		/// be called due to events like page navigation irregardless of whether any
		/// dialogs are currently pending.
		/// </summary>
		[NativeName("on_reset_dialog_state")]
		public unsafe void OnResetDialogState(cef_browser_t* browser)
		{
			fixed (cef_jsdialog_handler_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_jsdialog_handler_t*, cef_browser_t*, void>)on_reset_dialog_state)(self, browser);
			}
		}

		/// <summary>
		/// void (*)(_cef_jsdialog_handler_t* self, _cef_browser_t* browser)*
		/// </summary>
		public void* on_dialog_closed;

		/// <summary>
		/// Called when the default implementation dialog is closed.
		/// </summary>
		[NativeName("on_dialog_closed")]
		public unsafe void OnDialogClosed(cef_browser_t* browser)
		{
			fixed (cef_jsdialog_handler_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_jsdialog_handler_t*, cef_browser_t*, void>)on_dialog_closed)(self, browser);
			}
		}
	}
}

