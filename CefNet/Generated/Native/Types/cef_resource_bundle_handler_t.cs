// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_resource_bundle_handler_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure used to implement a custom resource bundle structure. See
	/// CefSettings for additional options related to resource bundle loading. The
	/// functions of this structure may be called on multiple threads.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_resource_bundle_handler_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// int (*)(_cef_resource_bundle_handler_t* self, int string_id, cef_string_t* string)*
		/// </summary>
		public void* get_localized_string;

		/// <summary>
		/// Called to retrieve a localized translation for the specified |string_id|.
		/// To provide the translation set |string| to the translation string and
		/// return true (1). To use the default translation return false (0). Include
		/// cef_pack_strings.h for a listing of valid string ID values.
		/// </summary>
		[NativeName("get_localized_string")]
		public unsafe int GetLocalizedString(int string_id, cef_string_t* @string)
		{
			fixed (cef_resource_bundle_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_resource_bundle_handler_t*, int, cef_string_t*, int>)get_localized_string)(self, string_id, @string);
			}
		}

		/// <summary>
		/// int (*)(_cef_resource_bundle_handler_t* self, int resource_id, void** data, size_t* data_size)*
		/// </summary>
		public void* get_data_resource;

		/// <summary>
		/// Called to retrieve data for the specified scale independent |resource_id|.
		/// To provide the resource data set |data| and |data_size| to the data pointer
		/// and size respectively and return true (1). To use the default resource data
		/// return false (0). The resource data will not be copied and must remain
		/// resident in memory. Include cef_pack_resources.h for a listing of valid
		/// resource ID values.
		/// </summary>
		[NativeName("get_data_resource")]
		public unsafe int GetDataResource(int resource_id, void** data, UIntPtr* data_size)
		{
			fixed (cef_resource_bundle_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_resource_bundle_handler_t*, int, void**, UIntPtr*, int>)get_data_resource)(self, resource_id, data, data_size);
			}
		}

		/// <summary>
		/// int (*)(_cef_resource_bundle_handler_t* self, int resource_id, cef_scale_factor_t scale_factor, void** data, size_t* data_size)*
		/// </summary>
		public void* get_data_resource_for_scale;

		/// <summary>
		/// Called to retrieve data for the specified |resource_id| nearest the scale
		/// factor |scale_factor|. To provide the resource data set |data| and
		/// |data_size| to the data pointer and size respectively and return true (1).
		/// To use the default resource data return false (0). The resource data will
		/// not be copied and must remain resident in memory. Include
		/// cef_pack_resources.h for a listing of valid resource ID values.
		/// </summary>
		[NativeName("get_data_resource_for_scale")]
		public unsafe int GetDataResourceForScale(int resource_id, CefScaleFactor scale_factor, void** data, UIntPtr* data_size)
		{
			fixed (cef_resource_bundle_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_resource_bundle_handler_t*, int, CefScaleFactor, void**, UIntPtr*, int>)get_data_resource_for_scale)(self, resource_id, scale_factor, data, data_size);
			}
		}
	}
}

