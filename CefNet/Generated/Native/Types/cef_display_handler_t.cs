// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_display_handler_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Implement this structure to handle events related to browser display state.
	/// The functions of this structure will be called on the UI thread.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_display_handler_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// void (*)(_cef_display_handler_t* self, _cef_browser_t* browser, _cef_frame_t* frame, const cef_string_t* url)*
		/// </summary>
		public void* on_address_change;

		/// <summary>
		/// Called when a frame&apos;s address has changed.
		/// </summary>
		[NativeName("on_address_change")]
		public unsafe void OnAddressChange(cef_browser_t* browser, cef_frame_t* frame, [Immutable]cef_string_t* url)
		{
			fixed (cef_display_handler_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_display_handler_t*, cef_browser_t*, cef_frame_t*, cef_string_t*, void>)on_address_change)(self, browser, frame, url);
			}
		}

		/// <summary>
		/// void (*)(_cef_display_handler_t* self, _cef_browser_t* browser, const cef_string_t* title)*
		/// </summary>
		public void* on_title_change;

		/// <summary>
		/// Called when the page title changes.
		/// </summary>
		[NativeName("on_title_change")]
		public unsafe void OnTitleChange(cef_browser_t* browser, [Immutable]cef_string_t* title)
		{
			fixed (cef_display_handler_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_display_handler_t*, cef_browser_t*, cef_string_t*, void>)on_title_change)(self, browser, title);
			}
		}

		/// <summary>
		/// void (*)(_cef_display_handler_t* self, _cef_browser_t* browser, cef_string_list_t icon_urls)*
		/// </summary>
		public void* on_favicon_urlchange;

		/// <summary>
		/// Called when the page icon changes.
		/// </summary>
		[NativeName("on_favicon_urlchange")]
		public unsafe void OnFaviconUrlChange(cef_browser_t* browser, cef_string_list_t icon_urls)
		{
			fixed (cef_display_handler_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_display_handler_t*, cef_browser_t*, cef_string_list_t, void>)on_favicon_urlchange)(self, browser, icon_urls);
			}
		}

		/// <summary>
		/// void (*)(_cef_display_handler_t* self, _cef_browser_t* browser, int fullscreen)*
		/// </summary>
		public void* on_fullscreen_mode_change;

		/// <summary>
		/// Called when web content in the page has toggled fullscreen mode. If
		/// |fullscreen| is true (1) the content will automatically be sized to fill
		/// the browser content area. If |fullscreen| is false (0) the content will
		/// automatically return to its original size and position. The client is
		/// responsible for resizing the browser if desired.
		/// </summary>
		[NativeName("on_fullscreen_mode_change")]
		public unsafe void OnFullscreenModeChange(cef_browser_t* browser, int fullscreen)
		{
			fixed (cef_display_handler_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_display_handler_t*, cef_browser_t*, int, void>)on_fullscreen_mode_change)(self, browser, fullscreen);
			}
		}

		/// <summary>
		/// int (*)(_cef_display_handler_t* self, _cef_browser_t* browser, cef_string_t* text)*
		/// </summary>
		public void* on_tooltip;

		/// <summary>
		/// Called when the browser is about to display a tooltip. |text| contains the
		/// text that will be displayed in the tooltip. To handle the display of the
		/// tooltip yourself return true (1). Otherwise, you can optionally modify
		/// |text| and then return false (0) to allow the browser to display the
		/// tooltip. When window rendering is disabled the application is responsible
		/// for drawing tooltips and the return value is ignored.
		/// </summary>
		[NativeName("on_tooltip")]
		public unsafe int OnTooltip(cef_browser_t* browser, cef_string_t* text)
		{
			fixed (cef_display_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_display_handler_t*, cef_browser_t*, cef_string_t*, int>)on_tooltip)(self, browser, text);
			}
		}

		/// <summary>
		/// void (*)(_cef_display_handler_t* self, _cef_browser_t* browser, const cef_string_t* value)*
		/// </summary>
		public void* on_status_message;

		/// <summary>
		/// Called when the browser receives a status message. |value| contains the
		/// text that will be displayed in the status message.
		/// </summary>
		[NativeName("on_status_message")]
		public unsafe void OnStatusMessage(cef_browser_t* browser, [Immutable]cef_string_t* value)
		{
			fixed (cef_display_handler_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_display_handler_t*, cef_browser_t*, cef_string_t*, void>)on_status_message)(self, browser, value);
			}
		}

		/// <summary>
		/// int (*)(_cef_display_handler_t* self, _cef_browser_t* browser, cef_log_severity_t level, const cef_string_t* message, const cef_string_t* source, int line)*
		/// </summary>
		public void* on_console_message;

		/// <summary>
		/// Called to display a console message. Return true (1) to stop the message
		/// from being output to the console.
		/// </summary>
		[NativeName("on_console_message")]
		public unsafe int OnConsoleMessage(cef_browser_t* browser, CefLogSeverity level, [Immutable]cef_string_t* message, [Immutable]cef_string_t* source, int line)
		{
			fixed (cef_display_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_display_handler_t*, cef_browser_t*, CefLogSeverity, cef_string_t*, cef_string_t*, int, int>)on_console_message)(self, browser, level, message, source, line);
			}
		}

		/// <summary>
		/// int (*)(_cef_display_handler_t* self, _cef_browser_t* browser, const cef_size_t* new_size)*
		/// </summary>
		public void* on_auto_resize;

		/// <summary>
		/// Called when auto-resize is enabled via
		/// cef_browser_host_t::SetAutoResizeEnabled and the contents have auto-
		/// resized. |new_size| will be the desired size in view coordinates. Return
		/// true (1) if the resize was handled or false (0) for default handling.
		/// </summary>
		[NativeName("on_auto_resize")]
		public unsafe int OnAutoResize(cef_browser_t* browser, [Immutable]cef_size_t* new_size)
		{
			fixed (cef_display_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_display_handler_t*, cef_browser_t*, cef_size_t*, int>)on_auto_resize)(self, browser, new_size);
			}
		}

		/// <summary>
		/// void (*)(_cef_display_handler_t* self, _cef_browser_t* browser, double progress)*
		/// </summary>
		public void* on_loading_progress_change;

		/// <summary>
		/// Called when the overall page loading progress has changed. |progress|
		/// ranges from 0.0 to 1.0.
		/// </summary>
		[NativeName("on_loading_progress_change")]
		public unsafe void OnLoadingProgressChange(cef_browser_t* browser, double progress)
		{
			fixed (cef_display_handler_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_display_handler_t*, cef_browser_t*, double, void>)on_loading_progress_change)(self, browser, progress);
			}
		}

		/// <summary>
		/// int (*)(_cef_display_handler_t* self, _cef_browser_t* browser, HCURSOR cursor, cef_cursor_type_t type, const const _cef_cursor_info_t* custom_cursor_info)*
		/// </summary>
		public void* on_cursor_change;

		/// <summary>
		/// Called when the browser&apos;s cursor has changed. If |type| is CT_CUSTOM then
		/// |custom_cursor_info| will be populated with the custom cursor information.
		/// Return true (1) if the cursor change was handled or false (0) for default
		/// handling.
		/// </summary>
		[NativeName("on_cursor_change")]
		public unsafe int OnCursorChange(cef_browser_t* browser, IntPtr cursor, CefCursorType type, [Immutable]cef_cursor_info_t* custom_cursor_info)
		{
			fixed (cef_display_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_display_handler_t*, cef_browser_t*, IntPtr, CefCursorType, cef_cursor_info_t*, int>)on_cursor_change)(self, browser, cursor, type, custom_cursor_info);
			}
		}
	}
}

