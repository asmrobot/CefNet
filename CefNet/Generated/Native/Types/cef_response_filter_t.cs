// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_response_filter_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Implement this structure to filter resource response content. The functions
	/// of this structure will be called on the browser process IO thread.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_response_filter_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// int (*)(_cef_response_filter_t* self)*
		/// </summary>
		public void* init_filter;

		/// <summary>
		/// Initialize the response filter. Will only be called a single time. The
		/// filter will not be installed if this function returns false (0).
		/// </summary>
		[NativeName("init_filter")]
		public unsafe int InitFilter()
		{
			fixed (cef_response_filter_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_response_filter_t*, int>)init_filter)(self);
			}
		}

		/// <summary>
		/// cef_response_filter_status_t (*)(_cef_response_filter_t* self, void* data_in, size_t data_in_size, size_t* data_in_read, void* data_out, size_t data_out_size, size_t* data_out_written)*
		/// </summary>
		public void* filter;

		/// <summary>
		/// Called to filter a chunk of data. Expected usage is as follows:
		/// A. Read input data from |data_in| and set |data_in_read| to the number of
		/// bytes that were read up to a maximum of |data_in_size|. |data_in| will
		/// be NULL if |data_in_size| is zero.
		/// B. Write filtered output data to |data_out| and set |data_out_written| to
		/// the number of bytes that were written up to a maximum of
		/// |data_out_size|. If no output data was written then all data must be
		/// read from |data_in| (user must set |data_in_read| = |data_in_size|).
		/// C. Return RESPONSE_FILTER_DONE if all output data was written or
		/// RESPONSE_FILTER_NEED_MORE_DATA if output data is still pending.
		/// This function will be called repeatedly until the input buffer has been
		/// fully read (user sets |data_in_read| = |data_in_size|) and there is no more
		/// input data to filter (the resource response is complete). This function may
		/// then be called an additional time with an NULL input buffer if the user
		/// filled the output buffer (set |data_out_written| = |data_out_size|) and
		/// returned RESPONSE_FILTER_NEED_MORE_DATA to indicate that output data is
		/// still pending.
		/// Calls to this function will stop when one of the following conditions is
		/// met:
		/// A. There is no more input data to filter (the resource response is
		/// complete) and the user sets |data_out_written| = 0 or returns
		/// RESPONSE_FILTER_DONE to indicate that all data has been written, or;
		/// B. The user returns RESPONSE_FILTER_ERROR to indicate an error.
		/// Do not keep a reference to the buffers passed to this function.
		/// </summary>
		[NativeName("filter")]
		public unsafe CefResponseFilterStatus Filter(void* data_in, UIntPtr data_in_size, UIntPtr* data_in_read, void* data_out, UIntPtr data_out_size, UIntPtr* data_out_written)
		{
			fixed (cef_response_filter_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_response_filter_t*, void*, UIntPtr, UIntPtr*, void*, UIntPtr, UIntPtr*, CefResponseFilterStatus>)filter)(self, data_in, data_in_size, data_in_read, data_out, data_out_size, data_out_written);
			}
		}
	}
}

