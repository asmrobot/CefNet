// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_download_item_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure used to represent a download item.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_download_item_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// int (*)(_cef_download_item_t* self)*
		/// </summary>
		public void* is_valid;

		/// <summary>
		/// Returns true (1) if this object is valid. Do not call any other functions
		/// if this function returns false (0).
		/// </summary>
		[NativeName("is_valid")]
		public unsafe int IsValid()
		{
			fixed (cef_download_item_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_download_item_t*, int>)is_valid)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_download_item_t* self)*
		/// </summary>
		public void* is_in_progress;

		/// <summary>
		/// Returns true (1) if the download is in progress.
		/// </summary>
		[NativeName("is_in_progress")]
		public unsafe int IsInProgress()
		{
			fixed (cef_download_item_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_download_item_t*, int>)is_in_progress)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_download_item_t* self)*
		/// </summary>
		public void* is_complete;

		/// <summary>
		/// Returns true (1) if the download is complete.
		/// </summary>
		[NativeName("is_complete")]
		public unsafe int IsComplete()
		{
			fixed (cef_download_item_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_download_item_t*, int>)is_complete)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_download_item_t* self)*
		/// </summary>
		public void* is_canceled;

		/// <summary>
		/// Returns true (1) if the download has been canceled or interrupted.
		/// </summary>
		[NativeName("is_canceled")]
		public unsafe int IsCanceled()
		{
			fixed (cef_download_item_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_download_item_t*, int>)is_canceled)(self);
			}
		}

		/// <summary>
		/// int64 (*)(_cef_download_item_t* self)*
		/// </summary>
		public void* get_current_speed;

		/// <summary>
		/// Returns a simple speed estimate in bytes/s.
		/// </summary>
		[NativeName("get_current_speed")]
		public unsafe long GetCurrentSpeed()
		{
			fixed (cef_download_item_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_download_item_t*, long>)get_current_speed)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_download_item_t* self)*
		/// </summary>
		public void* get_percent_complete;

		/// <summary>
		/// Returns the rough percent complete or -1 if the receive total size is
		/// unknown.
		/// </summary>
		[NativeName("get_percent_complete")]
		public unsafe int GetPercentComplete()
		{
			fixed (cef_download_item_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_download_item_t*, int>)get_percent_complete)(self);
			}
		}

		/// <summary>
		/// int64 (*)(_cef_download_item_t* self)*
		/// </summary>
		public void* get_total_bytes;

		/// <summary>
		/// Returns the total number of bytes.
		/// </summary>
		[NativeName("get_total_bytes")]
		public unsafe long GetTotalBytes()
		{
			fixed (cef_download_item_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_download_item_t*, long>)get_total_bytes)(self);
			}
		}

		/// <summary>
		/// int64 (*)(_cef_download_item_t* self)*
		/// </summary>
		public void* get_received_bytes;

		/// <summary>
		/// Returns the number of received bytes.
		/// </summary>
		[NativeName("get_received_bytes")]
		public unsafe long GetReceivedBytes()
		{
			fixed (cef_download_item_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_download_item_t*, long>)get_received_bytes)(self);
			}
		}

		/// <summary>
		/// cef_time_t (*)(_cef_download_item_t* self)*
		/// </summary>
		public void* get_start_time;

		/// <summary>
		/// Returns the time that the download started.
		/// </summary>
		[NativeName("get_start_time")]
		public unsafe cef_time_t GetStartTime()
		{
			fixed (cef_download_item_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_download_item_t*, cef_time_t>)get_start_time)(self);
			}
		}

		/// <summary>
		/// cef_time_t (*)(_cef_download_item_t* self)*
		/// </summary>
		public void* get_end_time;

		/// <summary>
		/// Returns the time that the download ended.
		/// </summary>
		[NativeName("get_end_time")]
		public unsafe cef_time_t GetEndTime()
		{
			fixed (cef_download_item_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_download_item_t*, cef_time_t>)get_end_time)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_download_item_t* self)*
		/// </summary>
		public void* get_full_path;

		/// <summary>
		/// Returns the full path to the downloaded or downloading file.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_full_path")]
		public unsafe cef_string_userfree_t GetFullPath()
		{
			fixed (cef_download_item_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_download_item_t*, cef_string_userfree_t>)get_full_path)(self);
			}
		}

		/// <summary>
		/// uint32 (*)(_cef_download_item_t* self)*
		/// </summary>
		public void* get_id;

		/// <summary>
		/// Returns the unique identifier for this download.
		/// </summary>
		[NativeName("get_id")]
		public unsafe uint GetId()
		{
			fixed (cef_download_item_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_download_item_t*, uint>)get_id)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_download_item_t* self)*
		/// </summary>
		public void* get_url;

		/// <summary>
		/// Returns the URL.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_url")]
		public unsafe cef_string_userfree_t GetUrl()
		{
			fixed (cef_download_item_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_download_item_t*, cef_string_userfree_t>)get_url)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_download_item_t* self)*
		/// </summary>
		public void* get_original_url;

		/// <summary>
		/// Returns the original URL before any redirections.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_original_url")]
		public unsafe cef_string_userfree_t GetOriginalUrl()
		{
			fixed (cef_download_item_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_download_item_t*, cef_string_userfree_t>)get_original_url)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_download_item_t* self)*
		/// </summary>
		public void* get_suggested_file_name;

		/// <summary>
		/// Returns the suggested file name.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_suggested_file_name")]
		public unsafe cef_string_userfree_t GetSuggestedFileName()
		{
			fixed (cef_download_item_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_download_item_t*, cef_string_userfree_t>)get_suggested_file_name)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_download_item_t* self)*
		/// </summary>
		public void* get_content_disposition;

		/// <summary>
		/// Returns the content disposition.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_content_disposition")]
		public unsafe cef_string_userfree_t GetContentDisposition()
		{
			fixed (cef_download_item_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_download_item_t*, cef_string_userfree_t>)get_content_disposition)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_download_item_t* self)*
		/// </summary>
		public void* get_mime_type;

		/// <summary>
		/// Returns the mime type.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_mime_type")]
		public unsafe cef_string_userfree_t GetMimeType()
		{
			fixed (cef_download_item_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_download_item_t*, cef_string_userfree_t>)get_mime_type)(self);
			}
		}
	}
}

