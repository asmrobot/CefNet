// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_v8_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure representing a V8 context handle. V8 handles can only be accessed
	/// from the thread on which they are created. Valid threads for creating a V8
	/// handle include the render process main thread (TID_RENDERER) and WebWorker
	/// threads. A task runner for posting tasks on the associated thread can be
	/// retrieved via the cef_v8context_t::get_task_runner() function.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_v8context_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// _cef_task_runner_t* (*)(_cef_v8context_t* self)*
		/// </summary>
		public void* get_task_runner;

		/// <summary>
		/// Returns the task runner associated with this context. V8 handles can only
		/// be accessed from the thread on which they are created. This function can be
		/// called on any render process thread.
		/// </summary>
		[NativeName("get_task_runner")]
		public unsafe cef_task_runner_t* GetTaskRunner()
		{
			fixed (cef_v8context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8context_t*, cef_task_runner_t*>)get_task_runner)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_v8context_t* self)*
		/// </summary>
		public void* is_valid;

		/// <summary>
		/// Returns true (1) if the underlying handle is valid and it can be accessed
		/// on the current thread. Do not call any other functions if this function
		/// returns false (0).
		/// </summary>
		[NativeName("is_valid")]
		public unsafe int IsValid()
		{
			fixed (cef_v8context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8context_t*, int>)is_valid)(self);
			}
		}

		/// <summary>
		/// _cef_browser_t* (*)(_cef_v8context_t* self)*
		/// </summary>
		public void* get_browser;

		/// <summary>
		/// Returns the browser for this context. This function will return an NULL
		/// reference for WebWorker contexts.
		/// </summary>
		[NativeName("get_browser")]
		public unsafe cef_browser_t* GetBrowser()
		{
			fixed (cef_v8context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8context_t*, cef_browser_t*>)get_browser)(self);
			}
		}

		/// <summary>
		/// _cef_frame_t* (*)(_cef_v8context_t* self)*
		/// </summary>
		public void* get_frame;

		/// <summary>
		/// Returns the frame for this context. This function will return an NULL
		/// reference for WebWorker contexts.
		/// </summary>
		[NativeName("get_frame")]
		public unsafe cef_frame_t* GetFrame()
		{
			fixed (cef_v8context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8context_t*, cef_frame_t*>)get_frame)(self);
			}
		}

		/// <summary>
		/// _cef_v8value_t* (*)(_cef_v8context_t* self)*
		/// </summary>
		public void* get_global;

		/// <summary>
		/// Returns the global object for this context. The context must be entered
		/// before calling this function.
		/// </summary>
		[NativeName("get_global")]
		public unsafe cef_v8value_t* GetGlobal()
		{
			fixed (cef_v8context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8context_t*, cef_v8value_t*>)get_global)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_v8context_t* self)*
		/// </summary>
		public void* enter;

		/// <summary>
		/// Enter this context. A context must be explicitly entered before creating a
		/// V8 Object, Array, Function or Date asynchronously. exit() must be called
		/// the same number of times as enter() before releasing this context. V8
		/// objects belong to the context in which they are created. Returns true (1)
		/// if the scope was entered successfully.
		/// </summary>
		[NativeName("enter")]
		public unsafe int Enter()
		{
			fixed (cef_v8context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8context_t*, int>)enter)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_v8context_t* self)*
		/// </summary>
		public void* exit;

		/// <summary>
		/// Exit this context. Call this function only after calling enter(). Returns
		/// true (1) if the scope was exited successfully.
		/// </summary>
		[NativeName("exit")]
		public unsafe int Exit()
		{
			fixed (cef_v8context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8context_t*, int>)exit)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_v8context_t* self, _cef_v8context_t* that)*
		/// </summary>
		public void* is_same;

		/// <summary>
		/// Returns true (1) if this object is pointing to the same handle as |that|
		/// object.
		/// </summary>
		[NativeName("is_same")]
		public unsafe int IsSame(cef_v8context_t* that)
		{
			fixed (cef_v8context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8context_t*, cef_v8context_t*, int>)is_same)(self, that);
			}
		}

		/// <summary>
		/// int (*)(_cef_v8context_t* self, const cef_string_t* code, const cef_string_t* script_url, int start_line, _cef_v8value_t** retval, _cef_v8exception_t** exception)*
		/// </summary>
		public void* eval;

		/// <summary>
		/// Execute a string of JavaScript code in this V8 context. The |script_url|
		/// parameter is the URL where the script in question can be found, if any. The
		/// |start_line| parameter is the base line number to use for error reporting.
		/// On success |retval| will be set to the return value, if any, and the
		/// function will return true (1). On failure |exception| will be set to the
		/// exception, if any, and the function will return false (0).
		/// </summary>
		[NativeName("eval")]
		public unsafe int Eval([Immutable]cef_string_t* code, [Immutable]cef_string_t* script_url, int start_line, cef_v8value_t** retval, cef_v8exception_t** exception)
		{
			fixed (cef_v8context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8context_t*, cef_string_t*, cef_string_t*, int, cef_v8value_t**, cef_v8exception_t**, int>)eval)(self, code, script_url, start_line, retval, exception);
			}
		}
	}
}

