// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_waitable_event_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// WaitableEvent is a thread synchronization tool that allows one thread to wait
	/// for another thread to finish some work. This is equivalent to using a
	/// Lock+ConditionVariable to protect a simple boolean value. However, using
	/// WaitableEvent in conjunction with a Lock to wait for a more complex state
	/// change (e.g., for an item to be added to a queue) is not recommended. In that
	/// case consider using a ConditionVariable instead of a WaitableEvent. It is
	/// safe to create and/or signal a WaitableEvent from any thread. Blocking on a
	/// WaitableEvent by calling the *wait() functions is not allowed on the browser
	/// process UI or IO threads.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_waitable_event_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// void (*)(_cef_waitable_event_t* self)*
		/// </summary>
		public void* reset;

		/// <summary>
		/// Put the event in the un-signaled state.
		/// </summary>
		[NativeName("reset")]
		public unsafe void Reset()
		{
			fixed (cef_waitable_event_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_waitable_event_t*, void>)reset)(self);
			}
		}

		/// <summary>
		/// void (*)(_cef_waitable_event_t* self)*
		/// </summary>
		public void* signal;

		/// <summary>
		/// Put the event in the signaled state. This causes any thread blocked on Wait
		/// to be woken up.
		/// </summary>
		[NativeName("signal")]
		public unsafe void Signal()
		{
			fixed (cef_waitable_event_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_waitable_event_t*, void>)signal)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_waitable_event_t* self)*
		/// </summary>
		public void* is_signaled;

		/// <summary>
		/// Returns true (1) if the event is in the signaled state, else false (0). If
		/// the event was created with |automatic_reset| set to true (1) then calling
		/// this function will also cause a reset.
		/// </summary>
		[NativeName("is_signaled")]
		public unsafe int IsSignaled()
		{
			fixed (cef_waitable_event_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_waitable_event_t*, int>)is_signaled)(self);
			}
		}

		/// <summary>
		/// void (*)(_cef_waitable_event_t* self)*
		/// </summary>
		public void* wait;

		/// <summary>
		/// Wait indefinitely for the event to be signaled. This function will not
		/// return until after the call to signal() has completed. This function cannot
		/// be called on the browser process UI or IO threads.
		/// </summary>
		[NativeName("wait")]
		public unsafe void Wait()
		{
			fixed (cef_waitable_event_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_waitable_event_t*, void>)wait)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_waitable_event_t* self, int64 max_ms)*
		/// </summary>
		public void* timed_wait;

		/// <summary>
		/// Wait up to |max_ms| milliseconds for the event to be signaled. Returns true
		/// (1) if the event was signaled. A return value of false (0) does not
		/// necessarily mean that |max_ms| was exceeded. This function will not return
		/// until after the call to signal() has completed. This function cannot be
		/// called on the browser process UI or IO threads.
		/// </summary>
		[NativeName("timed_wait")]
		public unsafe int TimedWait(long max_ms)
		{
			fixed (cef_waitable_event_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_waitable_event_t*, long, int>)timed_wait)(self, max_ms);
			}
		}
	}
}

