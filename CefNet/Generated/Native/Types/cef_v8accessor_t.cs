// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_v8_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure that should be implemented to handle V8 accessor calls. Accessor
	/// identifiers are registered by calling cef_v8value_t::set_value(). The
	/// functions of this structure will be called on the thread associated with the
	/// V8 accessor.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_v8accessor_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// int (*)(_cef_v8accessor_t* self, const cef_string_t* name, _cef_v8value_t* object, _cef_v8value_t** retval, cef_string_t* exception)*
		/// </summary>
		public void* get;

		/// <summary>
		/// Handle retrieval the accessor value identified by |name|. |object| is the
		/// receiver (&apos;this&apos; object) of the accessor. If retrieval succeeds set
		/// |retval| to the return value. If retrieval fails set |exception| to the
		/// exception that will be thrown. Return true (1) if accessor retrieval was
		/// handled.
		/// </summary>
		[NativeName("get")]
		public unsafe int Get([Immutable]cef_string_t* name, cef_v8value_t* @object, cef_v8value_t** retval, cef_string_t* exception)
		{
			fixed (cef_v8accessor_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8accessor_t*, cef_string_t*, cef_v8value_t*, cef_v8value_t**, cef_string_t*, int>)get)(self, name, @object, retval, exception);
			}
		}

		/// <summary>
		/// int (*)(_cef_v8accessor_t* self, const cef_string_t* name, _cef_v8value_t* object, _cef_v8value_t* value, cef_string_t* exception)*
		/// </summary>
		public void* set;

		/// <summary>
		/// Handle assignment of the accessor value identified by |name|. |object| is
		/// the receiver (&apos;this&apos; object) of the accessor. |value| is the new value
		/// being assigned to the accessor. If assignment fails set |exception| to the
		/// exception that will be thrown. Return true (1) if accessor assignment was
		/// handled.
		/// </summary>
		[NativeName("set")]
		public unsafe int Set([Immutable]cef_string_t* name, cef_v8value_t* @object, cef_v8value_t* value, cef_string_t* exception)
		{
			fixed (cef_v8accessor_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8accessor_t*, cef_string_t*, cef_v8value_t*, cef_v8value_t*, cef_string_t*, int>)set)(self, name, @object, value, exception);
			}
		}
	}
}

