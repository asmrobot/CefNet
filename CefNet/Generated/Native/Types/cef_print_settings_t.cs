// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_print_settings_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure representing print settings.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_print_settings_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// int (*)(_cef_print_settings_t* self)*
		/// </summary>
		public void* is_valid;

		/// <summary>
		/// Returns true (1) if this object is valid. Do not call any other functions
		/// if this function returns false (0).
		/// </summary>
		[NativeName("is_valid")]
		public unsafe int IsValid()
		{
			fixed (cef_print_settings_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_print_settings_t*, int>)is_valid)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_print_settings_t* self)*
		/// </summary>
		public void* is_read_only;

		/// <summary>
		/// Returns true (1) if the values of this object are read-only. Some APIs may
		/// expose read-only objects.
		/// </summary>
		[NativeName("is_read_only")]
		public unsafe int IsReadOnly()
		{
			fixed (cef_print_settings_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_print_settings_t*, int>)is_read_only)(self);
			}
		}

		/// <summary>
		/// void (*)(_cef_print_settings_t* self, int landscape)*
		/// </summary>
		public void* set_orientation;

		/// <summary>
		/// Set the page orientation.
		/// </summary>
		[NativeName("set_orientation")]
		public unsafe void SetOrientation(int landscape)
		{
			fixed (cef_print_settings_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_print_settings_t*, int, void>)set_orientation)(self, landscape);
			}
		}

		/// <summary>
		/// int (*)(_cef_print_settings_t* self)*
		/// </summary>
		public void* is_landscape;

		/// <summary>
		/// Returns true (1) if the orientation is landscape.
		/// </summary>
		[NativeName("is_landscape")]
		public unsafe int IsLandscape()
		{
			fixed (cef_print_settings_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_print_settings_t*, int>)is_landscape)(self);
			}
		}

		/// <summary>
		/// void (*)(_cef_print_settings_t* self, const cef_size_t* physical_size_device_units, const cef_rect_t* printable_area_device_units, int landscape_needs_flip)*
		/// </summary>
		public void* set_printer_printable_area;

		/// <summary>
		/// Set the printer printable area in device units. Some platforms already
		/// provide flipped area. Set |landscape_needs_flip| to false (0) on those
		/// platforms to avoid double flipping.
		/// </summary>
		[NativeName("set_printer_printable_area")]
		public unsafe void SetPrinterPrintableArea([Immutable]cef_size_t* physical_size_device_units, [Immutable]cef_rect_t* printable_area_device_units, int landscape_needs_flip)
		{
			fixed (cef_print_settings_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_print_settings_t*, cef_size_t*, cef_rect_t*, int, void>)set_printer_printable_area)(self, physical_size_device_units, printable_area_device_units, landscape_needs_flip);
			}
		}

		/// <summary>
		/// void (*)(_cef_print_settings_t* self, const cef_string_t* name)*
		/// </summary>
		public void* set_device_name;

		/// <summary>
		/// Set the device name.
		/// </summary>
		[NativeName("set_device_name")]
		public unsafe void SetDeviceName([Immutable]cef_string_t* name)
		{
			fixed (cef_print_settings_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_print_settings_t*, cef_string_t*, void>)set_device_name)(self, name);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_print_settings_t* self)*
		/// </summary>
		public void* get_device_name;

		/// <summary>
		/// Get the device name.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_device_name")]
		public unsafe cef_string_userfree_t GetDeviceName()
		{
			fixed (cef_print_settings_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_print_settings_t*, cef_string_userfree_t>)get_device_name)(self);
			}
		}

		/// <summary>
		/// void (*)(_cef_print_settings_t* self, int dpi)*
		/// </summary>
		public void* set_dpi;

		/// <summary>
		/// Set the DPI (dots per inch).
		/// </summary>
		[NativeName("set_dpi")]
		public unsafe void SetDpi(int dpi)
		{
			fixed (cef_print_settings_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_print_settings_t*, int, void>)set_dpi)(self, dpi);
			}
		}

		/// <summary>
		/// int (*)(_cef_print_settings_t* self)*
		/// </summary>
		public void* get_dpi;

		/// <summary>
		/// Get the DPI (dots per inch).
		/// </summary>
		[NativeName("get_dpi")]
		public unsafe int GetDpi()
		{
			fixed (cef_print_settings_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_print_settings_t*, int>)get_dpi)(self);
			}
		}

		/// <summary>
		/// void (*)(_cef_print_settings_t* self, size_t rangesCount, const cef_range_t* ranges)*
		/// </summary>
		public void* set_page_ranges;

		/// <summary>
		/// Set the page ranges.
		/// </summary>
		[NativeName("set_page_ranges")]
		public unsafe void SetPageRanges(UIntPtr rangesCount, [Immutable]cef_range_t* ranges)
		{
			fixed (cef_print_settings_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_print_settings_t*, UIntPtr, cef_range_t*, void>)set_page_ranges)(self, rangesCount, ranges);
			}
		}

		/// <summary>
		/// size_t (*)(_cef_print_settings_t* self)*
		/// </summary>
		public void* get_page_ranges_count;

		/// <summary>
		/// Returns the number of page ranges that currently exist.
		/// </summary>
		[NativeName("get_page_ranges_count")]
		public unsafe UIntPtr GetPageRangesCount()
		{
			fixed (cef_print_settings_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_print_settings_t*, UIntPtr>)get_page_ranges_count)(self);
			}
		}

		/// <summary>
		/// void (*)(_cef_print_settings_t* self, size_t* rangesCount, cef_range_t* ranges)*
		/// </summary>
		public void* get_page_ranges;

		/// <summary>
		/// Retrieve the page ranges.
		/// </summary>
		[NativeName("get_page_ranges")]
		public unsafe void GetPageRanges(UIntPtr* rangesCount, cef_range_t* ranges)
		{
			fixed (cef_print_settings_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_print_settings_t*, UIntPtr*, cef_range_t*, void>)get_page_ranges)(self, rangesCount, ranges);
			}
		}

		/// <summary>
		/// void (*)(_cef_print_settings_t* self, int selection_only)*
		/// </summary>
		public void* set_selection_only;

		/// <summary>
		/// Set whether only the selection will be printed.
		/// </summary>
		[NativeName("set_selection_only")]
		public unsafe void SetSelectionOnly(int selection_only)
		{
			fixed (cef_print_settings_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_print_settings_t*, int, void>)set_selection_only)(self, selection_only);
			}
		}

		/// <summary>
		/// int (*)(_cef_print_settings_t* self)*
		/// </summary>
		public void* is_selection_only;

		/// <summary>
		/// Returns true (1) if only the selection will be printed.
		/// </summary>
		[NativeName("is_selection_only")]
		public unsafe int IsSelectionOnly()
		{
			fixed (cef_print_settings_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_print_settings_t*, int>)is_selection_only)(self);
			}
		}

		/// <summary>
		/// void (*)(_cef_print_settings_t* self, int collate)*
		/// </summary>
		public void* set_collate;

		/// <summary>
		/// Set whether pages will be collated.
		/// </summary>
		[NativeName("set_collate")]
		public unsafe void SetCollate(int collate)
		{
			fixed (cef_print_settings_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_print_settings_t*, int, void>)set_collate)(self, collate);
			}
		}

		/// <summary>
		/// int (*)(_cef_print_settings_t* self)*
		/// </summary>
		public void* will_collate;

		/// <summary>
		/// Returns true (1) if pages will be collated.
		/// </summary>
		[NativeName("will_collate")]
		public unsafe int WillCollate()
		{
			fixed (cef_print_settings_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_print_settings_t*, int>)will_collate)(self);
			}
		}

		/// <summary>
		/// void (*)(_cef_print_settings_t* self, cef_color_model_t model)*
		/// </summary>
		public void* set_color_model;

		/// <summary>
		/// Set the color model.
		/// </summary>
		[NativeName("set_color_model")]
		public unsafe void SetColorModel(CefColorModel model)
		{
			fixed (cef_print_settings_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_print_settings_t*, CefColorModel, void>)set_color_model)(self, model);
			}
		}

		/// <summary>
		/// cef_color_model_t (*)(_cef_print_settings_t* self)*
		/// </summary>
		public void* get_color_model;

		/// <summary>
		/// Get the color model.
		/// </summary>
		[NativeName("get_color_model")]
		public unsafe CefColorModel GetColorModel()
		{
			fixed (cef_print_settings_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_print_settings_t*, CefColorModel>)get_color_model)(self);
			}
		}

		/// <summary>
		/// void (*)(_cef_print_settings_t* self, int copies)*
		/// </summary>
		public void* set_copies;

		/// <summary>
		/// Set the number of copies.
		/// </summary>
		[NativeName("set_copies")]
		public unsafe void SetCopies(int copies)
		{
			fixed (cef_print_settings_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_print_settings_t*, int, void>)set_copies)(self, copies);
			}
		}

		/// <summary>
		/// int (*)(_cef_print_settings_t* self)*
		/// </summary>
		public void* get_copies;

		/// <summary>
		/// Get the number of copies.
		/// </summary>
		[NativeName("get_copies")]
		public unsafe int GetCopies()
		{
			fixed (cef_print_settings_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_print_settings_t*, int>)get_copies)(self);
			}
		}

		/// <summary>
		/// void (*)(_cef_print_settings_t* self, cef_duplex_mode_t mode)*
		/// </summary>
		public void* set_duplex_mode;

		/// <summary>
		/// Set the duplex mode.
		/// </summary>
		[NativeName("set_duplex_mode")]
		public unsafe void SetDuplexMode(CefDuplexMode mode)
		{
			fixed (cef_print_settings_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_print_settings_t*, CefDuplexMode, void>)set_duplex_mode)(self, mode);
			}
		}

		/// <summary>
		/// cef_duplex_mode_t (*)(_cef_print_settings_t* self)*
		/// </summary>
		public void* get_duplex_mode;

		/// <summary>
		/// Get the duplex mode.
		/// </summary>
		[NativeName("get_duplex_mode")]
		public unsafe CefDuplexMode GetDuplexMode()
		{
			fixed (cef_print_settings_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_print_settings_t*, CefDuplexMode>)get_duplex_mode)(self);
			}
		}
	}
}

