// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_zip_reader_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure that supports the reading of zip archives via the zlib unzip API.
	/// The functions of this structure should only be called on the thread that
	/// creates the object.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_zip_reader_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// int (*)(_cef_zip_reader_t* self)*
		/// </summary>
		public void* move_to_first_file;

		/// <summary>
		/// Moves the cursor to the first file in the archive. Returns true (1) if the
		/// cursor position was set successfully.
		/// </summary>
		[NativeName("move_to_first_file")]
		public unsafe int MoveToFirstFile()
		{
			fixed (cef_zip_reader_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_zip_reader_t*, int>)move_to_first_file)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_zip_reader_t* self)*
		/// </summary>
		public void* move_to_next_file;

		/// <summary>
		/// Moves the cursor to the next file in the archive. Returns true (1) if the
		/// cursor position was set successfully.
		/// </summary>
		[NativeName("move_to_next_file")]
		public unsafe int MoveToNextFile()
		{
			fixed (cef_zip_reader_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_zip_reader_t*, int>)move_to_next_file)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_zip_reader_t* self, const cef_string_t* fileName, int caseSensitive)*
		/// </summary>
		public void* move_to_file;

		/// <summary>
		/// Moves the cursor to the specified file in the archive. If |caseSensitive|
		/// is true (1) then the search will be case sensitive. Returns true (1) if the
		/// cursor position was set successfully.
		/// </summary>
		[NativeName("move_to_file")]
		public unsafe int MoveToFile([Immutable]cef_string_t* fileName, int caseSensitive)
		{
			fixed (cef_zip_reader_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_zip_reader_t*, cef_string_t*, int, int>)move_to_file)(self, fileName, caseSensitive);
			}
		}

		/// <summary>
		/// int (*)(_cef_zip_reader_t* self)*
		/// </summary>
		public void* close;

		/// <summary>
		/// Closes the archive. This should be called directly to ensure that cleanup
		/// occurs on the correct thread.
		/// </summary>
		[NativeName("close")]
		public unsafe int Close()
		{
			fixed (cef_zip_reader_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_zip_reader_t*, int>)close)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_zip_reader_t* self)*
		/// </summary>
		public void* get_file_name;

		/// <summary>
		/// Returns the name of the file.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_file_name")]
		public unsafe cef_string_userfree_t GetFileName()
		{
			fixed (cef_zip_reader_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_zip_reader_t*, cef_string_userfree_t>)get_file_name)(self);
			}
		}

		/// <summary>
		/// int64 (*)(_cef_zip_reader_t* self)*
		/// </summary>
		public void* get_file_size;

		/// <summary>
		/// Returns the uncompressed size of the file.
		/// </summary>
		[NativeName("get_file_size")]
		public unsafe long GetFileSize()
		{
			fixed (cef_zip_reader_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_zip_reader_t*, long>)get_file_size)(self);
			}
		}

		/// <summary>
		/// cef_time_t (*)(_cef_zip_reader_t* self)*
		/// </summary>
		public void* get_file_last_modified;

		/// <summary>
		/// Returns the last modified timestamp for the file.
		/// </summary>
		[NativeName("get_file_last_modified")]
		public unsafe cef_time_t GetFileLastModified()
		{
			fixed (cef_zip_reader_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_zip_reader_t*, cef_time_t>)get_file_last_modified)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_zip_reader_t* self, const cef_string_t* password)*
		/// </summary>
		public void* open_file;

		/// <summary>
		/// Opens the file for reading of uncompressed data. A read password may
		/// optionally be specified.
		/// </summary>
		[NativeName("open_file")]
		public unsafe int OpenFile([Immutable]cef_string_t* password)
		{
			fixed (cef_zip_reader_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_zip_reader_t*, cef_string_t*, int>)open_file)(self, password);
			}
		}

		/// <summary>
		/// int (*)(_cef_zip_reader_t* self)*
		/// </summary>
		public void* close_file;

		/// <summary>
		/// Closes the file.
		/// </summary>
		[NativeName("close_file")]
		public unsafe int CloseFile()
		{
			fixed (cef_zip_reader_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_zip_reader_t*, int>)close_file)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_zip_reader_t* self, void* buffer, size_t bufferSize)*
		/// </summary>
		public void* read_file;

		/// <summary>
		/// Read uncompressed file contents into the specified buffer. Returns 
		/// &lt;
		/// 0 if
		/// an error occurred, 0 if at the end of file, or the number of bytes read.
		/// </summary>
		[NativeName("read_file")]
		public unsafe int ReadFile(void* buffer, UIntPtr bufferSize)
		{
			fixed (cef_zip_reader_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_zip_reader_t*, void*, UIntPtr, int>)read_file)(self, buffer, bufferSize);
			}
		}

		/// <summary>
		/// int64 (*)(_cef_zip_reader_t* self)*
		/// </summary>
		public void* tell;

		/// <summary>
		/// Returns the current offset in the uncompressed file contents.
		/// </summary>
		[NativeName("tell")]
		public unsafe long Tell()
		{
			fixed (cef_zip_reader_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_zip_reader_t*, long>)tell)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_zip_reader_t* self)*
		/// </summary>
		public void* eof;

		/// <summary>
		/// Returns true (1) if at end of the file contents.
		/// </summary>
		[NativeName("eof")]
		public unsafe int Eof()
		{
			fixed (cef_zip_reader_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_zip_reader_t*, int>)eof)(self);
			}
		}
	}
}

