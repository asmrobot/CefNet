// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_dialog_handler_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Callback structure for asynchronous continuation of file dialog requests.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_file_dialog_callback_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// void (*)(_cef_file_dialog_callback_t* self, int selected_accept_filter, cef_string_list_t file_paths)*
		/// </summary>
		public void* cont;

		/// <summary>
		/// Continue the file selection. |selected_accept_filter| should be the 0-based
		/// index of the value selected from the accept filters array passed to
		/// cef_dialog_handler_t::OnFileDialog. |file_paths| should be a single value
		/// or a list of values depending on the dialog mode. An NULL |file_paths|
		/// value is treated the same as calling cancel().
		/// </summary>
		[NativeName("cont")]
		public unsafe void Continue(int selected_accept_filter, cef_string_list_t file_paths)
		{
			fixed (cef_file_dialog_callback_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_file_dialog_callback_t*, int, cef_string_list_t, void>)cont)(self, selected_accept_filter, file_paths);
			}
		}

		/// <summary>
		/// void (*)(_cef_file_dialog_callback_t* self)*
		/// </summary>
		public void* cancel;

		/// <summary>
		/// Cancel the file selection.
		/// </summary>
		[NativeName("cancel")]
		public unsafe void Cancel()
		{
			fixed (cef_file_dialog_callback_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_file_dialog_callback_t*, void>)cancel)(self);
			}
		}
	}
}

