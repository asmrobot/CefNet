// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_request_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure used to represent post data for a web request. The functions of
	/// this structure may be called on any thread.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_post_data_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// int (*)(_cef_post_data_t* self)*
		/// </summary>
		public void* is_read_only;

		/// <summary>
		/// Returns true (1) if this object is read-only.
		/// </summary>
		[NativeName("is_read_only")]
		public unsafe int IsReadOnly()
		{
			fixed (cef_post_data_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_post_data_t*, int>)is_read_only)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_post_data_t* self)*
		/// </summary>
		public void* has_excluded_elements;

		/// <summary>
		/// Returns true (1) if the underlying POST data includes elements that are not
		/// represented by this cef_post_data_t object (for example, multi-part file
		/// upload data). Modifying cef_post_data_t objects with excluded elements may
		/// result in the request failing.
		/// </summary>
		[NativeName("has_excluded_elements")]
		public unsafe int HasExcludedElements()
		{
			fixed (cef_post_data_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_post_data_t*, int>)has_excluded_elements)(self);
			}
		}

		/// <summary>
		/// size_t (*)(_cef_post_data_t* self)*
		/// </summary>
		public void* get_element_count;

		/// <summary>
		/// Returns the number of existing post data elements.
		/// </summary>
		[NativeName("get_element_count")]
		public unsafe UIntPtr GetElementCount()
		{
			fixed (cef_post_data_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_post_data_t*, UIntPtr>)get_element_count)(self);
			}
		}

		/// <summary>
		/// void (*)(_cef_post_data_t* self, size_t* elementsCount, _cef_post_data_element_t** elements)*
		/// </summary>
		public void* get_elements;

		/// <summary>
		/// Retrieve the post data elements.
		/// </summary>
		[NativeName("get_elements")]
		public unsafe void GetElements(UIntPtr* elementsCount, cef_post_data_element_t** elements)
		{
			fixed (cef_post_data_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_post_data_t*, UIntPtr*, cef_post_data_element_t**, void>)get_elements)(self, elementsCount, elements);
			}
		}

		/// <summary>
		/// int (*)(_cef_post_data_t* self, _cef_post_data_element_t* element)*
		/// </summary>
		public void* remove_element;

		/// <summary>
		/// Remove the specified post data element.  Returns true (1) if the removal
		/// succeeds.
		/// </summary>
		[NativeName("remove_element")]
		public unsafe int RemoveElement(cef_post_data_element_t* element)
		{
			fixed (cef_post_data_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_post_data_t*, cef_post_data_element_t*, int>)remove_element)(self, element);
			}
		}

		/// <summary>
		/// int (*)(_cef_post_data_t* self, _cef_post_data_element_t* element)*
		/// </summary>
		public void* add_element;

		/// <summary>
		/// Add the specified post data element.  Returns true (1) if the add succeeds.
		/// </summary>
		[NativeName("add_element")]
		public unsafe int AddElement(cef_post_data_element_t* element)
		{
			fixed (cef_post_data_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_post_data_t*, cef_post_data_element_t*, int>)add_element)(self, element);
			}
		}

		/// <summary>
		/// void (*)(_cef_post_data_t* self)*
		/// </summary>
		public void* remove_elements;

		/// <summary>
		/// Remove all existing post data elements.
		/// </summary>
		[NativeName("remove_elements")]
		public unsafe void RemoveElements()
		{
			fixed (cef_post_data_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_post_data_t*, void>)remove_elements)(self);
			}
		}
	}
}

