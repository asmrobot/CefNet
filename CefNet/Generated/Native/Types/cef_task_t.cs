// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_task_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Implement this structure for asynchronous task execution. If the task is
	/// posted successfully and if the associated message loop is still running then
	/// the execute() function will be called on the target thread. If the task fails
	/// to post then the task object may be destroyed on the source thread instead of
	/// the target thread. For this reason be cautious when performing work in the
	/// task object destructor.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_task_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// void (*)(_cef_task_t* self)*
		/// </summary>
		public void* execute;

		/// <summary>
		/// Method that will be executed on the target thread.
		/// </summary>
		[NativeName("execute")]
		public unsafe void Execute()
		{
			fixed (cef_task_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_task_t*, void>)execute)(self);
			}
		}
	}
}

