// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_dom_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure used to represent a DOM node. The functions of this structure
	/// should only be called on the render process main thread.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_domnode_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// cef_dom_node_type_t (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_type;

		/// <summary>
		/// Returns the type for this node.
		/// </summary>
		[NativeName("get_type")]
		public unsafe CefDOMNodeType GetCefType()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, CefDOMNodeType>)get_type)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* is_text;

		/// <summary>
		/// Returns true (1) if this is a text node.
		/// </summary>
		[NativeName("is_text")]
		public unsafe int IsText()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, int>)is_text)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* is_element;

		/// <summary>
		/// Returns true (1) if this is an element node.
		/// </summary>
		[NativeName("is_element")]
		public unsafe int IsElement()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, int>)is_element)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* is_editable;

		/// <summary>
		/// Returns true (1) if this is an editable node.
		/// </summary>
		[NativeName("is_editable")]
		public unsafe int IsEditable()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, int>)is_editable)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* is_form_control_element;

		/// <summary>
		/// Returns true (1) if this is a form control element node.
		/// </summary>
		[NativeName("is_form_control_element")]
		public unsafe int IsFormControlElement()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, int>)is_form_control_element)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_form_control_element_type;

		/// <summary>
		/// Returns the type of this form control element node.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_form_control_element_type")]
		public unsafe cef_string_userfree_t GetFormControlElementType()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_string_userfree_t>)get_form_control_element_type)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_domnode_t* self, _cef_domnode_t* that)*
		/// </summary>
		public void* is_same;

		/// <summary>
		/// Returns true (1) if this object is pointing to the same handle as |that|
		/// object.
		/// </summary>
		[NativeName("is_same")]
		public unsafe int IsSame(cef_domnode_t* that)
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_domnode_t*, int>)is_same)(self, that);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_name;

		/// <summary>
		/// Returns the name of this node.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_name")]
		public unsafe cef_string_userfree_t GetName()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_string_userfree_t>)get_name)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_value;

		/// <summary>
		/// Returns the value of this node.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_value")]
		public unsafe cef_string_userfree_t GetValue()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_string_userfree_t>)get_value)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_domnode_t* self, const cef_string_t* value)*
		/// </summary>
		public void* set_value;

		/// <summary>
		/// Set the value of this node. Returns true (1) on success.
		/// </summary>
		[NativeName("set_value")]
		public unsafe int SetValue([Immutable]cef_string_t* value)
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_string_t*, int>)set_value)(self, value);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_as_markup;

		/// <summary>
		/// Returns the contents of this node as markup.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_as_markup")]
		public unsafe cef_string_userfree_t GetAsMarkup()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_string_userfree_t>)get_as_markup)(self);
			}
		}

		/// <summary>
		/// _cef_domdocument_t* (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_document;

		/// <summary>
		/// Returns the document associated with this node.
		/// </summary>
		[NativeName("get_document")]
		public unsafe cef_domdocument_t* GetDocument()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_domdocument_t*>)get_document)(self);
			}
		}

		/// <summary>
		/// _cef_domnode_t* (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_parent;

		/// <summary>
		/// Returns the parent node.
		/// </summary>
		[NativeName("get_parent")]
		public unsafe cef_domnode_t* GetParent()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_domnode_t*>)get_parent)(self);
			}
		}

		/// <summary>
		/// _cef_domnode_t* (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_previous_sibling;

		/// <summary>
		/// Returns the previous sibling node.
		/// </summary>
		[NativeName("get_previous_sibling")]
		public unsafe cef_domnode_t* GetPreviousSibling()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_domnode_t*>)get_previous_sibling)(self);
			}
		}

		/// <summary>
		/// _cef_domnode_t* (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_next_sibling;

		/// <summary>
		/// Returns the next sibling node.
		/// </summary>
		[NativeName("get_next_sibling")]
		public unsafe cef_domnode_t* GetNextSibling()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_domnode_t*>)get_next_sibling)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* has_children;

		/// <summary>
		/// Returns true (1) if this node has child nodes.
		/// </summary>
		[NativeName("has_children")]
		public unsafe int HasChildren()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, int>)has_children)(self);
			}
		}

		/// <summary>
		/// _cef_domnode_t* (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_first_child;

		/// <summary>
		/// Return the first child node.
		/// </summary>
		[NativeName("get_first_child")]
		public unsafe cef_domnode_t* GetFirstChild()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_domnode_t*>)get_first_child)(self);
			}
		}

		/// <summary>
		/// _cef_domnode_t* (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_last_child;

		/// <summary>
		/// Returns the last child node.
		/// </summary>
		[NativeName("get_last_child")]
		public unsafe cef_domnode_t* GetLastChild()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_domnode_t*>)get_last_child)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_element_tag_name;

		/// <summary>
		/// Returns the tag name of this element.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_element_tag_name")]
		public unsafe cef_string_userfree_t GetElementTagName()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_string_userfree_t>)get_element_tag_name)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* has_element_attributes;

		/// <summary>
		/// Returns true (1) if this element has attributes.
		/// </summary>
		[NativeName("has_element_attributes")]
		public unsafe int HasElementAttributes()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, int>)has_element_attributes)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_domnode_t* self, const cef_string_t* attrName)*
		/// </summary>
		public void* has_element_attribute;

		/// <summary>
		/// Returns true (1) if this element has an attribute named |attrName|.
		/// </summary>
		[NativeName("has_element_attribute")]
		public unsafe int HasElementAttribute([Immutable]cef_string_t* attrName)
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_string_t*, int>)has_element_attribute)(self, attrName);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domnode_t* self, const cef_string_t* attrName)*
		/// </summary>
		public void* get_element_attribute;

		/// <summary>
		/// Returns the element attribute named |attrName|.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_element_attribute")]
		public unsafe cef_string_userfree_t GetElementAttribute([Immutable]cef_string_t* attrName)
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_string_t*, cef_string_userfree_t>)get_element_attribute)(self, attrName);
			}
		}

		/// <summary>
		/// void (*)(_cef_domnode_t* self, cef_string_map_t attrMap)*
		/// </summary>
		public void* get_element_attributes;

		/// <summary>
		/// Returns a map of all element attributes.
		/// </summary>
		[NativeName("get_element_attributes")]
		public unsafe void GetElementAttributes(cef_string_map_t attrMap)
		{
			fixed (cef_domnode_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_string_map_t, void>)get_element_attributes)(self, attrMap);
			}
		}

		/// <summary>
		/// int (*)(_cef_domnode_t* self, const cef_string_t* attrName, const cef_string_t* value)*
		/// </summary>
		public void* set_element_attribute;

		/// <summary>
		/// Set the value for the element attribute named |attrName|. Returns true (1)
		/// on success.
		/// </summary>
		[NativeName("set_element_attribute")]
		public unsafe int SetElementAttribute([Immutable]cef_string_t* attrName, [Immutable]cef_string_t* value)
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_string_t*, cef_string_t*, int>)set_element_attribute)(self, attrName, value);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_element_inner_text;

		/// <summary>
		/// Returns the inner text of the element.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_element_inner_text")]
		public unsafe cef_string_userfree_t GetElementInnerText()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_string_userfree_t>)get_element_inner_text)(self);
			}
		}

		/// <summary>
		/// cef_rect_t (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_element_bounds;

		/// <summary>
		/// Returns the bounds of the element.
		/// </summary>
		[NativeName("get_element_bounds")]
		public unsafe cef_rect_t GetElementBounds()
		{
			fixed (cef_domnode_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_domnode_t*, cef_rect_t>)get_element_bounds)(self);
			}
		}
	}
}

