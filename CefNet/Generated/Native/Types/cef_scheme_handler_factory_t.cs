// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_scheme_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure that creates cef_resource_handler_t instances for handling scheme
	/// requests. The functions of this structure will always be called on the IO
	/// thread.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_scheme_handler_factory_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// _cef_resource_handler_t* (*)(_cef_scheme_handler_factory_t* self, _cef_browser_t* browser, _cef_frame_t* frame, const cef_string_t* scheme_name, _cef_request_t* request)*
		/// </summary>
		public void* create;

		/// <summary>
		/// Return a new resource handler instance to handle the request or an NULL
		/// reference to allow default handling of the request. |browser| and |frame|
		/// will be the browser window and frame respectively that originated the
		/// request or NULL if the request did not originate from a browser window (for
		/// example, if the request came from cef_urlrequest_t). The |request| object
		/// passed to this function cannot be modified.
		/// </summary>
		[NativeName("create")]
		public unsafe cef_resource_handler_t* Create(cef_browser_t* browser, cef_frame_t* frame, [Immutable]cef_string_t* scheme_name, cef_request_t* request)
		{
			fixed (cef_scheme_handler_factory_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_scheme_handler_factory_t*, cef_browser_t*, cef_frame_t*, cef_string_t*, cef_request_t*, cef_resource_handler_t*>)create)(self, browser, frame, scheme_name, request);
			}
		}
	}
}

