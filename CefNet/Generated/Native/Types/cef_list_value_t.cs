// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_values_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure representing a list value. Can be used on any process and thread.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_list_value_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// int (*)(_cef_list_value_t* self)*
		/// </summary>
		public void* is_valid;

		/// <summary>
		/// Returns true (1) if this object is valid. This object may become invalid if
		/// the underlying data is owned by another object (e.g. list or dictionary)
		/// and that other object is then modified or destroyed. Do not call any other
		/// functions if this function returns false (0).
		/// </summary>
		[NativeName("is_valid")]
		public unsafe int IsValid()
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, int>)is_valid)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self)*
		/// </summary>
		public void* is_owned;

		/// <summary>
		/// Returns true (1) if this object is currently owned by another object.
		/// </summary>
		[NativeName("is_owned")]
		public unsafe int IsOwned()
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, int>)is_owned)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self)*
		/// </summary>
		public void* is_read_only;

		/// <summary>
		/// Returns true (1) if the values of this object are read-only. Some APIs may
		/// expose read-only objects.
		/// </summary>
		[NativeName("is_read_only")]
		public unsafe int IsReadOnly()
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, int>)is_read_only)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self, _cef_list_value_t* that)*
		/// </summary>
		public void* is_same;

		/// <summary>
		/// Returns true (1) if this object and |that| object have the same underlying
		/// data. If true (1) modifications to this object will also affect |that|
		/// object and vice-versa.
		/// </summary>
		[NativeName("is_same")]
		public unsafe int IsSame(cef_list_value_t* that)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, cef_list_value_t*, int>)is_same)(self, that);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self, _cef_list_value_t* that)*
		/// </summary>
		public void* is_equal;

		/// <summary>
		/// Returns true (1) if this object and |that| object have an equivalent
		/// underlying value but are not necessarily the same object.
		/// </summary>
		[NativeName("is_equal")]
		public unsafe int IsEqual(cef_list_value_t* that)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, cef_list_value_t*, int>)is_equal)(self, that);
			}
		}

		/// <summary>
		/// _cef_list_value_t* (*)(_cef_list_value_t* self)*
		/// </summary>
		public void* copy;

		/// <summary>
		/// Returns a writable copy of this object.
		/// </summary>
		[NativeName("copy")]
		public unsafe cef_list_value_t* Copy()
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, cef_list_value_t*>)copy)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self, size_t size)*
		/// </summary>
		public void* set_size;

		/// <summary>
		/// Sets the number of values. If the number of values is expanded all new
		/// value slots will default to type null. Returns true (1) on success.
		/// </summary>
		[NativeName("set_size")]
		public unsafe int SetSize(UIntPtr size)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, int>)set_size)(self, size);
			}
		}

		/// <summary>
		/// size_t (*)(_cef_list_value_t* self)*
		/// </summary>
		public void* get_size;

		/// <summary>
		/// Returns the number of values.
		/// </summary>
		[NativeName("get_size")]
		public unsafe UIntPtr GetSize()
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr>)get_size)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self)*
		/// </summary>
		public void* clear;

		/// <summary>
		/// Removes all values. Returns true (1) on success.
		/// </summary>
		[NativeName("clear")]
		public unsafe int Clear()
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, int>)clear)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self, size_t index)*
		/// </summary>
		public void* remove;

		/// <summary>
		/// Removes the value at the specified index.
		/// </summary>
		[NativeName("remove")]
		public unsafe int Remove(UIntPtr index)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, int>)remove)(self, index);
			}
		}

		/// <summary>
		/// cef_value_type_t (*)(_cef_list_value_t* self, size_t index)*
		/// </summary>
		public void* get_type;

		/// <summary>
		/// Returns the value type at the specified index.
		/// </summary>
		[NativeName("get_type")]
		public unsafe CefValueType GetType(UIntPtr index)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, CefValueType>)get_type)(self, index);
			}
		}

		/// <summary>
		/// _cef_value_t* (*)(_cef_list_value_t* self, size_t index)*
		/// </summary>
		public void* get_value;

		/// <summary>
		/// Returns the value at the specified index. For simple types the returned
		/// value will copy existing data and modifications to the value will not
		/// modify this object. For complex types (binary, dictionary and list) the
		/// returned value will reference existing data and modifications to the value
		/// will modify this object.
		/// </summary>
		[NativeName("get_value")]
		public unsafe cef_value_t* GetValue(UIntPtr index)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, cef_value_t*>)get_value)(self, index);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self, size_t index)*
		/// </summary>
		public void* get_bool;

		/// <summary>
		/// Returns the value at the specified index as type bool.
		/// </summary>
		[NativeName("get_bool")]
		public unsafe int GetBool(UIntPtr index)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, int>)get_bool)(self, index);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self, size_t index)*
		/// </summary>
		public void* get_int;

		/// <summary>
		/// Returns the value at the specified index as type int.
		/// </summary>
		[NativeName("get_int")]
		public unsafe int GetInt(UIntPtr index)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, int>)get_int)(self, index);
			}
		}

		/// <summary>
		/// double (*)(_cef_list_value_t* self, size_t index)*
		/// </summary>
		public void* get_double;

		/// <summary>
		/// Returns the value at the specified index as type double.
		/// </summary>
		[NativeName("get_double")]
		public unsafe double GetDouble(UIntPtr index)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, double>)get_double)(self, index);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_list_value_t* self, size_t index)*
		/// </summary>
		public void* get_string;

		/// <summary>
		/// Returns the value at the specified index as type string.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_string")]
		public unsafe cef_string_userfree_t GetString(UIntPtr index)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, cef_string_userfree_t>)get_string)(self, index);
			}
		}

		/// <summary>
		/// _cef_binary_value_t* (*)(_cef_list_value_t* self, size_t index)*
		/// </summary>
		public void* get_binary;

		/// <summary>
		/// Returns the value at the specified index as type binary. The returned value
		/// will reference existing data.
		/// </summary>
		[NativeName("get_binary")]
		public unsafe cef_binary_value_t* GetBinary(UIntPtr index)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, cef_binary_value_t*>)get_binary)(self, index);
			}
		}

		/// <summary>
		/// _cef_dictionary_value_t* (*)(_cef_list_value_t* self, size_t index)*
		/// </summary>
		public void* get_dictionary;

		/// <summary>
		/// Returns the value at the specified index as type dictionary. The returned
		/// value will reference existing data and modifications to the value will
		/// modify this object.
		/// </summary>
		[NativeName("get_dictionary")]
		public unsafe cef_dictionary_value_t* GetDictionary(UIntPtr index)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, cef_dictionary_value_t*>)get_dictionary)(self, index);
			}
		}

		/// <summary>
		/// _cef_list_value_t* (*)(_cef_list_value_t* self, size_t index)*
		/// </summary>
		public void* get_list;

		/// <summary>
		/// Returns the value at the specified index as type list. The returned value
		/// will reference existing data and modifications to the value will modify
		/// this object.
		/// </summary>
		[NativeName("get_list")]
		public unsafe cef_list_value_t* GetList(UIntPtr index)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, cef_list_value_t*>)get_list)(self, index);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self, size_t index, _cef_value_t* value)*
		/// </summary>
		public void* set_value;

		/// <summary>
		/// Sets the value at the specified index. Returns true (1) if the value was
		/// set successfully. If |value| represents simple data then the underlying
		/// data will be copied and modifications to |value| will not modify this
		/// object. If |value| represents complex data (binary, dictionary or list)
		/// then the underlying data will be referenced and modifications to |value|
		/// will modify this object.
		/// </summary>
		[NativeName("set_value")]
		public unsafe int SetValue(UIntPtr index, cef_value_t* value)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, cef_value_t*, int>)set_value)(self, index, value);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self, size_t index)*
		/// </summary>
		public void* set_null;

		/// <summary>
		/// Sets the value at the specified index as type null. Returns true (1) if the
		/// value was set successfully.
		/// </summary>
		[NativeName("set_null")]
		public unsafe int SetNull(UIntPtr index)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, int>)set_null)(self, index);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self, size_t index, int value)*
		/// </summary>
		public void* set_bool;

		/// <summary>
		/// Sets the value at the specified index as type bool. Returns true (1) if the
		/// value was set successfully.
		/// </summary>
		[NativeName("set_bool")]
		public unsafe int SetBool(UIntPtr index, int value)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, int, int>)set_bool)(self, index, value);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self, size_t index, int value)*
		/// </summary>
		public void* set_int;

		/// <summary>
		/// Sets the value at the specified index as type int. Returns true (1) if the
		/// value was set successfully.
		/// </summary>
		[NativeName("set_int")]
		public unsafe int SetInt(UIntPtr index, int value)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, int, int>)set_int)(self, index, value);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self, size_t index, double value)*
		/// </summary>
		public void* set_double;

		/// <summary>
		/// Sets the value at the specified index as type double. Returns true (1) if
		/// the value was set successfully.
		/// </summary>
		[NativeName("set_double")]
		public unsafe int SetDouble(UIntPtr index, double value)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, double, int>)set_double)(self, index, value);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self, size_t index, const cef_string_t* value)*
		/// </summary>
		public void* set_string;

		/// <summary>
		/// Sets the value at the specified index as type string. Returns true (1) if
		/// the value was set successfully.
		/// </summary>
		[NativeName("set_string")]
		public unsafe int SetString(UIntPtr index, [Immutable]cef_string_t* value)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, cef_string_t*, int>)set_string)(self, index, value);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self, size_t index, _cef_binary_value_t* value)*
		/// </summary>
		public void* set_binary;

		/// <summary>
		/// Sets the value at the specified index as type binary. Returns true (1) if
		/// the value was set successfully. If |value| is currently owned by another
		/// object then the value will be copied and the |value| reference will not
		/// change. Otherwise, ownership will be transferred to this object and the
		/// |value| reference will be invalidated.
		/// </summary>
		[NativeName("set_binary")]
		public unsafe int SetBinary(UIntPtr index, cef_binary_value_t* value)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, cef_binary_value_t*, int>)set_binary)(self, index, value);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self, size_t index, _cef_dictionary_value_t* value)*
		/// </summary>
		public void* set_dictionary;

		/// <summary>
		/// Sets the value at the specified index as type dict. Returns true (1) if the
		/// value was set successfully. If |value| is currently owned by another object
		/// then the value will be copied and the |value| reference will not change.
		/// Otherwise, ownership will be transferred to this object and the |value|
		/// reference will be invalidated.
		/// </summary>
		[NativeName("set_dictionary")]
		public unsafe int SetDictionary(UIntPtr index, cef_dictionary_value_t* value)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, cef_dictionary_value_t*, int>)set_dictionary)(self, index, value);
			}
		}

		/// <summary>
		/// int (*)(_cef_list_value_t* self, size_t index, _cef_list_value_t* value)*
		/// </summary>
		public void* set_list;

		/// <summary>
		/// Sets the value at the specified index as type list. Returns true (1) if the
		/// value was set successfully. If |value| is currently owned by another object
		/// then the value will be copied and the |value| reference will not change.
		/// Otherwise, ownership will be transferred to this object and the |value|
		/// reference will be invalidated.
		/// </summary>
		[NativeName("set_list")]
		public unsafe int SetList(UIntPtr index, cef_list_value_t* value)
		{
			fixed (cef_list_value_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_list_value_t*, UIntPtr, cef_list_value_t*, int>)set_list)(self, index, value);
			}
		}
	}
}

