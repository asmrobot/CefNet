// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_extension_handler_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Implement this structure to handle events related to browser extensions. The
	/// functions of this structure will be called on the UI thread. See
	/// cef_request_context_t::LoadExtension for information about extension loading.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_extension_handler_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// void (*)(_cef_extension_handler_t* self, cef_errorcode_t result)*
		/// </summary>
		public void* on_extension_load_failed;

		/// <summary>
		/// Called if the cef_request_context_t::LoadExtension request fails. |result|
		/// will be the error code.
		/// </summary>
		[NativeName("on_extension_load_failed")]
		public unsafe void OnExtensionLoadFailed(CefErrorCode result)
		{
			fixed (cef_extension_handler_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_extension_handler_t*, CefErrorCode, void>)on_extension_load_failed)(self, result);
			}
		}

		/// <summary>
		/// void (*)(_cef_extension_handler_t* self, _cef_extension_t* extension)*
		/// </summary>
		public void* on_extension_loaded;

		/// <summary>
		/// Called if the cef_request_context_t::LoadExtension request succeeds.
		/// |extension| is the loaded extension.
		/// </summary>
		[NativeName("on_extension_loaded")]
		public unsafe void OnExtensionLoaded(cef_extension_t* extension)
		{
			fixed (cef_extension_handler_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_extension_handler_t*, cef_extension_t*, void>)on_extension_loaded)(self, extension);
			}
		}

		/// <summary>
		/// void (*)(_cef_extension_handler_t* self, _cef_extension_t* extension)*
		/// </summary>
		public void* on_extension_unloaded;

		/// <summary>
		/// Called after the cef_extension_t::Unload request has completed.
		/// </summary>
		[NativeName("on_extension_unloaded")]
		public unsafe void OnExtensionUnloaded(cef_extension_t* extension)
		{
			fixed (cef_extension_handler_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_extension_handler_t*, cef_extension_t*, void>)on_extension_unloaded)(self, extension);
			}
		}

		/// <summary>
		/// int (*)(_cef_extension_handler_t* self, _cef_extension_t* extension, const cef_string_t* url, _cef_client_t** client, _cef_browser_settings_t* settings)*
		/// </summary>
		public void* on_before_background_browser;

		/// <summary>
		/// Called when an extension needs a browser to host a background script
		/// specified via the &quot;background&quot; manifest key. The browser will have no
		/// visible window and cannot be displayed. |extension| is the extension that
		/// is loading the background script. |url| is an internally generated
		/// reference to an HTML page that will be used to load the background script
		/// via a 
		/// &lt;script
		/// &gt; src attribute. To allow creation of the browser optionally
		/// modify |client| and |settings| and return false (0). To cancel creation of
		/// the browser (and consequently cancel load of the background script) return
		/// true (1). Successful creation will be indicated by a call to
		/// cef_life_span_handler_t::OnAfterCreated, and
		/// cef_browser_host_t::IsBackgroundHost will return true (1) for the resulting
		/// browser. See https://developer.chrome.com/extensions/event_pages for more
		/// information about extension background script usage.
		/// </summary>
		[NativeName("on_before_background_browser")]
		public unsafe int OnBeforeBackgroundBrowser(cef_extension_t* extension, [Immutable]cef_string_t* url, cef_client_t** client, cef_browser_settings_t* settings)
		{
			fixed (cef_extension_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_extension_handler_t*, cef_extension_t*, cef_string_t*, cef_client_t**, cef_browser_settings_t*, int>)on_before_background_browser)(self, extension, url, client, settings);
			}
		}

		/// <summary>
		/// int (*)(_cef_extension_handler_t* self, _cef_extension_t* extension, _cef_browser_t* browser, _cef_browser_t* active_browser, int index, const cef_string_t* url, int active, _cef_window_info_t* windowInfo, _cef_client_t** client, _cef_browser_settings_t* settings)*
		/// </summary>
		public void* on_before_browser;

		/// <summary>
		/// Called when an extension API (e.g. chrome.tabs.create) requests creation of
		/// a new browser. |extension| and |browser| are the source of the API call.
		/// |active_browser| may optionally be specified via the windowId property or
		/// returned via the get_active_browser() callback and provides the default
		/// |client| and |settings| values for the new browser. |index| is the position
		/// value optionally specified via the index property. |url| is the URL that
		/// will be loaded in the browser. |active| is true (1) if the new browser
		/// should be active when opened.  To allow creation of the browser optionally
		/// modify |windowInfo|, |client| and |settings| and return false (0). To
		/// cancel creation of the browser return true (1). Successful creation will be
		/// indicated by a call to cef_life_span_handler_t::OnAfterCreated. Any
		/// modifications to |windowInfo| will be ignored if |active_browser| is
		/// wrapped in a cef_browser_view_t.
		/// </summary>
		[NativeName("on_before_browser")]
		public unsafe int OnBeforeBrowser(cef_extension_t* extension, cef_browser_t* browser, cef_browser_t* active_browser, int index, [Immutable]cef_string_t* url, int active, cef_window_info_t* windowInfo, cef_client_t** client, cef_browser_settings_t* settings)
		{
			fixed (cef_extension_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_extension_handler_t*, cef_extension_t*, cef_browser_t*, cef_browser_t*, int, cef_string_t*, int, cef_window_info_t*, cef_client_t**, cef_browser_settings_t*, int>)on_before_browser)(self, extension, browser, active_browser, index, url, active, windowInfo, client, settings);
			}
		}

		/// <summary>
		/// _cef_browser_t* (*)(_cef_extension_handler_t* self, _cef_extension_t* extension, _cef_browser_t* browser, int include_incognito)*
		/// </summary>
		public void* get_active_browser;

		/// <summary>
		/// Called when no tabId is specified to an extension API call that accepts a
		/// tabId parameter (e.g. chrome.tabs.*). |extension| and |browser| are the
		/// source of the API call. Return the browser that will be acted on by the API
		/// call or return NULL to act on |browser|. The returned browser must share
		/// the same cef_request_context_t as |browser|. Incognito browsers should not
		/// be considered unless the source extension has incognito access enabled, in
		/// which case |include_incognito| will be true (1).
		/// </summary>
		[NativeName("get_active_browser")]
		public unsafe cef_browser_t* GetActiveBrowser(cef_extension_t* extension, cef_browser_t* browser, int include_incognito)
		{
			fixed (cef_extension_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_extension_handler_t*, cef_extension_t*, cef_browser_t*, int, cef_browser_t*>)get_active_browser)(self, extension, browser, include_incognito);
			}
		}

		/// <summary>
		/// int (*)(_cef_extension_handler_t* self, _cef_extension_t* extension, _cef_browser_t* browser, int include_incognito, _cef_browser_t* target_browser)*
		/// </summary>
		public void* can_access_browser;

		/// <summary>
		/// Called when the tabId associated with |target_browser| is specified to an
		/// extension API call that accepts a tabId parameter (e.g. chrome.tabs.*).
		/// |extension| and |browser| are the source of the API call. Return true (1)
		/// to allow access of false (0) to deny access. Access to incognito browsers
		/// should not be allowed unless the source extension has incognito access
		/// enabled, in which case |include_incognito| will be true (1).
		/// </summary>
		[NativeName("can_access_browser")]
		public unsafe int CanAccessBrowser(cef_extension_t* extension, cef_browser_t* browser, int include_incognito, cef_browser_t* target_browser)
		{
			fixed (cef_extension_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_extension_handler_t*, cef_extension_t*, cef_browser_t*, int, cef_browser_t*, int>)can_access_browser)(self, extension, browser, include_incognito, target_browser);
			}
		}

		/// <summary>
		/// int (*)(_cef_extension_handler_t* self, _cef_extension_t* extension, _cef_browser_t* browser, const cef_string_t* file, _cef_get_extension_resource_callback_t* callback)*
		/// </summary>
		public void* get_extension_resource;

		/// <summary>
		/// Called to retrieve an extension resource that would normally be loaded from
		/// disk (e.g. if a file parameter is specified to chrome.tabs.executeScript).
		/// |extension| and |browser| are the source of the resource request. |file| is
		/// the requested relative file path. To handle the resource request return
		/// true (1) and execute |callback| either synchronously or asynchronously. For
		/// the default behavior which reads the resource from the extension directory
		/// on disk return false (0). Localization substitutions will not be applied to
		/// resources handled via this function.
		/// </summary>
		[NativeName("get_extension_resource")]
		public unsafe int GetExtensionResource(cef_extension_t* extension, cef_browser_t* browser, [Immutable]cef_string_t* file, cef_get_extension_resource_callback_t* callback)
		{
			fixed (cef_extension_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_extension_handler_t*, cef_extension_t*, cef_browser_t*, cef_string_t*, cef_get_extension_resource_callback_t*, int>)get_extension_resource)(self, extension, browser, file, callback);
			}
		}
	}
}

