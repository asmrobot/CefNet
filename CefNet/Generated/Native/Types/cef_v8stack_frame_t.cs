// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_v8_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure representing a V8 stack frame handle. V8 handles can only be
	/// accessed from the thread on which they are created. Valid threads for
	/// creating a V8 handle include the render process main thread (TID_RENDERER)
	/// and WebWorker threads. A task runner for posting tasks on the associated
	/// thread can be retrieved via the cef_v8context_t::get_task_runner() function.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_v8stack_frame_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// int (*)(_cef_v8stack_frame_t* self)*
		/// </summary>
		public void* is_valid;

		/// <summary>
		/// Returns true (1) if the underlying handle is valid and it can be accessed
		/// on the current thread. Do not call any other functions if this function
		/// returns false (0).
		/// </summary>
		[NativeName("is_valid")]
		public unsafe int IsValid()
		{
			fixed (cef_v8stack_frame_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8stack_frame_t*, int>)is_valid)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_v8stack_frame_t* self)*
		/// </summary>
		public void* get_script_name;

		/// <summary>
		/// Returns the name of the resource script that contains the function.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_script_name")]
		public unsafe cef_string_userfree_t GetScriptName()
		{
			fixed (cef_v8stack_frame_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8stack_frame_t*, cef_string_userfree_t>)get_script_name)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_v8stack_frame_t* self)*
		/// </summary>
		public void* get_script_name_or_source_url;

		/// <summary>
		/// Returns the name of the resource script that contains the function or the
		/// sourceURL value if the script name is undefined and its source ends with a
		/// &quot;//
		/// @
		/// sourceURL=...&quot; string.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_script_name_or_source_url")]
		public unsafe cef_string_userfree_t GetScriptNameOrSourceUrl()
		{
			fixed (cef_v8stack_frame_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8stack_frame_t*, cef_string_userfree_t>)get_script_name_or_source_url)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_v8stack_frame_t* self)*
		/// </summary>
		public void* get_function_name;

		/// <summary>
		/// Returns the name of the function.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_function_name")]
		public unsafe cef_string_userfree_t GetFunctionName()
		{
			fixed (cef_v8stack_frame_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8stack_frame_t*, cef_string_userfree_t>)get_function_name)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_v8stack_frame_t* self)*
		/// </summary>
		public void* get_line_number;

		/// <summary>
		/// Returns the 1-based line number for the function call or 0 if unknown.
		/// </summary>
		[NativeName("get_line_number")]
		public unsafe int GetLineNumber()
		{
			fixed (cef_v8stack_frame_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8stack_frame_t*, int>)get_line_number)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_v8stack_frame_t* self)*
		/// </summary>
		public void* get_column;

		/// <summary>
		/// Returns the 1-based column offset on the line for the function call or 0 if
		/// unknown.
		/// </summary>
		[NativeName("get_column")]
		public unsafe int GetColumn()
		{
			fixed (cef_v8stack_frame_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8stack_frame_t*, int>)get_column)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_v8stack_frame_t* self)*
		/// </summary>
		public void* is_eval;

		/// <summary>
		/// Returns true (1) if the function was compiled using eval().
		/// </summary>
		[NativeName("is_eval")]
		public unsafe int IsEval()
		{
			fixed (cef_v8stack_frame_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8stack_frame_t*, int>)is_eval)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_v8stack_frame_t* self)*
		/// </summary>
		public void* is_constructor;

		/// <summary>
		/// Returns true (1) if the function was called as a constructor via &quot;new&quot;.
		/// </summary>
		[NativeName("is_constructor")]
		public unsafe int IsConstructor()
		{
			fixed (cef_v8stack_frame_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_v8stack_frame_t*, int>)is_constructor)(self);
			}
		}
	}
}

