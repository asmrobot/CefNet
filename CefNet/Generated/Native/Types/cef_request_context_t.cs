// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_request_context_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// A request context provides request handling for a set of related browser or
	/// URL request objects. A request context can be specified when creating a new
	/// browser via the cef_browser_host_t static factory functions or when creating
	/// a new URL request via the cef_urlrequest_t static factory functions. Browser
	/// objects with different request contexts will never be hosted in the same
	/// render process. Browser objects with the same request context may or may not
	/// be hosted in the same render process depending on the process model. Browser
	/// objects created indirectly via the JavaScript window.open function or
	/// targeted links will share the same render process and the same request
	/// context as the source browser. When running in single-process mode there is
	/// only a single render process (the main process) and so all browsers created
	/// in single-process mode will share the same request context. This will be the
	/// first request context passed into a cef_browser_host_t static factory
	/// function and all other request context objects will be ignored.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_request_context_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// int (*)(_cef_request_context_t* self, _cef_request_context_t* other)*
		/// </summary>
		public void* is_same;

		/// <summary>
		/// Returns true (1) if this object is pointing to the same context as |that|
		/// object.
		/// </summary>
		[NativeName("is_same")]
		public unsafe int IsSame(cef_request_context_t* other)
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_request_context_t*, int>)is_same)(self, other);
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self, _cef_request_context_t* other)*
		/// </summary>
		public void* is_sharing_with;

		/// <summary>
		/// Returns true (1) if this object is sharing the same storage as |that|
		/// object.
		/// </summary>
		[NativeName("is_sharing_with")]
		public unsafe int IsSharingWith(cef_request_context_t* other)
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_request_context_t*, int>)is_sharing_with)(self, other);
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self)*
		/// </summary>
		public void* is_global;

		/// <summary>
		/// Returns true (1) if this object is the global context. The global context
		/// is used by default when creating a browser or URL request with a NULL
		/// context argument.
		/// </summary>
		[NativeName("is_global")]
		public unsafe int IsGlobal()
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, int>)is_global)(self);
			}
		}

		/// <summary>
		/// _cef_request_context_handler_t* (*)(_cef_request_context_t* self)*
		/// </summary>
		public void* get_handler;

		/// <summary>
		/// Returns the handler for this context if any.
		/// </summary>
		[NativeName("get_handler")]
		public unsafe cef_request_context_handler_t* GetHandler()
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_request_context_handler_t*>)get_handler)(self);
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_request_context_t* self)*
		/// </summary>
		public void* get_cache_path;

		/// <summary>
		/// Returns the cache path for this object. If NULL an &quot;incognito mode&quot; in-
		/// memory cache is being used.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_cache_path")]
		public unsafe cef_string_userfree_t GetCachePath()
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_string_userfree_t>)get_cache_path)(self);
			}
		}

		/// <summary>
		/// _cef_cookie_manager_t* (*)(_cef_request_context_t* self, _cef_completion_callback_t* callback)*
		/// </summary>
		public void* get_cookie_manager;

		/// <summary>
		/// Returns the cookie manager for this object. If |callback| is non-NULL it
		/// will be executed asnychronously on the UI thread after the manager&apos;s
		/// storage has been initialized.
		/// </summary>
		[NativeName("get_cookie_manager")]
		public unsafe cef_cookie_manager_t* GetCookieManager(cef_completion_callback_t* callback)
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_completion_callback_t*, cef_cookie_manager_t*>)get_cookie_manager)(self, callback);
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self, const cef_string_t* scheme_name, const cef_string_t* domain_name, _cef_scheme_handler_factory_t* factory)*
		/// </summary>
		public void* register_scheme_handler_factory;

		/// <summary>
		/// Register a scheme handler factory for the specified |scheme_name| and
		/// optional |domain_name|. An NULL |domain_name| value for a standard scheme
		/// will cause the factory to match all domain names. The |domain_name| value
		/// will be ignored for non-standard schemes. If |scheme_name| is a built-in
		/// scheme and no handler is returned by |factory| then the built-in scheme
		/// handler factory will be called. If |scheme_name| is a custom scheme then
		/// you must also implement the cef_app_t::on_register_custom_schemes()
		/// function in all processes. This function may be called multiple times to
		/// change or remove the factory that matches the specified |scheme_name| and
		/// optional |domain_name|. Returns false (0) if an error occurs. This function
		/// may be called on any thread in the browser process.
		/// </summary>
		[NativeName("register_scheme_handler_factory")]
		public unsafe int RegisterSchemeHandlerFactory([Immutable]cef_string_t* scheme_name, [Immutable]cef_string_t* domain_name, cef_scheme_handler_factory_t* factory)
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_string_t*, cef_string_t*, cef_scheme_handler_factory_t*, int>)register_scheme_handler_factory)(self, scheme_name, domain_name, factory);
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self)*
		/// </summary>
		public void* clear_scheme_handler_factories;

		/// <summary>
		/// Clear all registered scheme handler factories. Returns false (0) on error.
		/// This function may be called on any thread in the browser process.
		/// </summary>
		[NativeName("clear_scheme_handler_factories")]
		public unsafe int ClearSchemeHandlerFactories()
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, int>)clear_scheme_handler_factories)(self);
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self, const cef_string_t* name)*
		/// </summary>
		public void* has_preference;

		/// <summary>
		/// Returns true (1) if a preference with the specified |name| exists. This
		/// function must be called on the browser process UI thread.
		/// </summary>
		[NativeName("has_preference")]
		public unsafe int HasPreference([Immutable]cef_string_t* name)
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_string_t*, int>)has_preference)(self, name);
			}
		}

		/// <summary>
		/// _cef_value_t* (*)(_cef_request_context_t* self, const cef_string_t* name)*
		/// </summary>
		public void* get_preference;

		/// <summary>
		/// Returns the value for the preference with the specified |name|. Returns
		/// NULL if the preference does not exist. The returned object contains a copy
		/// of the underlying preference value and modifications to the returned object
		/// will not modify the underlying preference value. This function must be
		/// called on the browser process UI thread.
		/// </summary>
		[NativeName("get_preference")]
		public unsafe cef_value_t* GetPreference([Immutable]cef_string_t* name)
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_string_t*, cef_value_t*>)get_preference)(self, name);
			}
		}

		/// <summary>
		/// _cef_dictionary_value_t* (*)(_cef_request_context_t* self, int include_defaults)*
		/// </summary>
		public void* get_all_preferences;

		/// <summary>
		/// Returns all preferences as a dictionary. If |include_defaults| is true (1)
		/// then preferences currently at their default value will be included. The
		/// returned object contains a copy of the underlying preference values and
		/// modifications to the returned object will not modify the underlying
		/// preference values. This function must be called on the browser process UI
		/// thread.
		/// </summary>
		[NativeName("get_all_preferences")]
		public unsafe cef_dictionary_value_t* GetAllPreferences(int include_defaults)
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, int, cef_dictionary_value_t*>)get_all_preferences)(self, include_defaults);
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self, const cef_string_t* name)*
		/// </summary>
		public void* can_set_preference;

		/// <summary>
		/// Returns true (1) if the preference with the specified |name| can be
		/// modified using SetPreference. As one example preferences set via the
		/// command-line usually cannot be modified. This function must be called on
		/// the browser process UI thread.
		/// </summary>
		[NativeName("can_set_preference")]
		public unsafe int CanSetPreference([Immutable]cef_string_t* name)
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_string_t*, int>)can_set_preference)(self, name);
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self, const cef_string_t* name, _cef_value_t* value, cef_string_t* error)*
		/// </summary>
		public void* set_preference;

		/// <summary>
		/// Set the |value| associated with preference |name|. Returns true (1) if the
		/// value is set successfully and false (0) otherwise. If |value| is NULL the
		/// preference will be restored to its default value. If setting the preference
		/// fails then |error| will be populated with a detailed description of the
		/// problem. This function must be called on the browser process UI thread.
		/// </summary>
		[NativeName("set_preference")]
		public unsafe int SetPreference([Immutable]cef_string_t* name, cef_value_t* value, cef_string_t* error)
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_string_t*, cef_value_t*, cef_string_t*, int>)set_preference)(self, name, value, error);
			}
		}

		/// <summary>
		/// void (*)(_cef_request_context_t* self, _cef_completion_callback_t* callback)*
		/// </summary>
		public void* clear_certificate_exceptions;

		/// <summary>
		/// Clears all certificate exceptions that were added as part of handling
		/// cef_request_handler_t::on_certificate_error(). If you call this it is
		/// recommended that you also call close_all_connections() or you risk not
		/// being prompted again for server certificates if you reconnect quickly. If
		/// |callback| is non-NULL it will be executed on the UI thread after
		/// completion.
		/// </summary>
		[NativeName("clear_certificate_exceptions")]
		public unsafe void ClearCertificateExceptions(cef_completion_callback_t* callback)
		{
			fixed (cef_request_context_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_completion_callback_t*, void>)clear_certificate_exceptions)(self, callback);
			}
		}

		/// <summary>
		/// void (*)(_cef_request_context_t* self, _cef_completion_callback_t* callback)*
		/// </summary>
		public void* clear_http_auth_credentials;

		/// <summary>
		/// Clears all HTTP authentication credentials that were added as part of
		/// handling GetAuthCredentials. If |callback| is non-NULL it will be executed
		/// on the UI thread after completion.
		/// </summary>
		[NativeName("clear_http_auth_credentials")]
		public unsafe void ClearHttpAuthCredentials(cef_completion_callback_t* callback)
		{
			fixed (cef_request_context_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_completion_callback_t*, void>)clear_http_auth_credentials)(self, callback);
			}
		}

		/// <summary>
		/// void (*)(_cef_request_context_t* self, _cef_completion_callback_t* callback)*
		/// </summary>
		public void* close_all_connections;

		/// <summary>
		/// Clears all active and idle connections that Chromium currently has. This is
		/// only recommended if you have released all other CEF objects but don&apos;t yet
		/// want to call cef_shutdown(). If |callback| is non-NULL it will be executed
		/// on the UI thread after completion.
		/// </summary>
		[NativeName("close_all_connections")]
		public unsafe void CloseAllConnections(cef_completion_callback_t* callback)
		{
			fixed (cef_request_context_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_completion_callback_t*, void>)close_all_connections)(self, callback);
			}
		}

		/// <summary>
		/// void (*)(_cef_request_context_t* self, const cef_string_t* origin, _cef_resolve_callback_t* callback)*
		/// </summary>
		public void* resolve_host;

		/// <summary>
		/// Attempts to resolve |origin| to a list of associated IP addresses.
		/// |callback| will be executed on the UI thread after completion.
		/// </summary>
		[NativeName("resolve_host")]
		public unsafe void ResolveHost([Immutable]cef_string_t* origin, cef_resolve_callback_t* callback)
		{
			fixed (cef_request_context_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_string_t*, cef_resolve_callback_t*, void>)resolve_host)(self, origin, callback);
			}
		}

		/// <summary>
		/// void (*)(_cef_request_context_t* self, const cef_string_t* root_directory, _cef_dictionary_value_t* manifest, _cef_extension_handler_t* handler)*
		/// </summary>
		public void* load_extension;

		/// <summary>
		/// Load an extension.
		/// If extension resources will be read from disk using the default load
		/// implementation then |root_directory| should be the absolute path to the
		/// extension resources directory and |manifest| should be NULL. If extension
		/// resources will be provided by the client (e.g. via cef_request_handler_t
		/// and/or cef_extension_handler_t) then |root_directory| should be a path
		/// component unique to the extension (if not absolute this will be internally
		/// prefixed with the PK_DIR_RESOURCES path) and |manifest| should contain the
		/// contents that would otherwise be read from the &quot;manifest.json&quot; file on
		/// disk.
		/// The loaded extension will be accessible in all contexts sharing the same
		/// storage (HasExtension returns true (1)). However, only the context on which
		/// this function was called is considered the loader (DidLoadExtension returns
		/// true (1)) and only the loader will receive cef_request_context_handler_t
		/// callbacks for the extension.
		/// cef_extension_handler_t::OnExtensionLoaded will be called on load success
		/// or cef_extension_handler_t::OnExtensionLoadFailed will be called on load
		/// failure.
		/// If the extension specifies a background script via the &quot;background&quot;
		/// manifest key then cef_extension_handler_t::OnBeforeBackgroundBrowser will
		/// be called to create the background browser. See that function for
		/// additional information about background scripts.
		/// For visible extension views the client application should evaluate the
		/// manifest to determine the correct extension URL to load and then pass that
		/// URL to the cef_browser_host_t::CreateBrowser* function after the extension
		/// has loaded. For example, the client can look for the &quot;browser_action&quot;
		/// manifest key as documented at
		/// https://developer.chrome.com/extensions/browserAction. Extension URLs take
		/// the form &quot;chrome-extension://
		/// &lt;extension
		/// _id&gt;/
		/// &lt;path
		/// &gt;&quot;.
		/// Browsers that host extensions differ from normal browsers as follows:
		/// - Can access chrome.* JavaScript APIs if allowed by the manifest. Visit
		/// chrome://extensions-support for the list of extension APIs currently
		/// supported by CEF.
		/// - Main frame navigation to non-extension content is blocked.
		/// - Pinch-zooming is disabled.
		/// - CefBrowserHost::GetExtension returns the hosted extension.
		/// - CefBrowserHost::IsBackgroundHost returns true for background hosts.
		/// See https://developer.chrome.com/extensions for extension implementation
		/// and usage documentation.
		/// </summary>
		[NativeName("load_extension")]
		public unsafe void LoadExtension([Immutable]cef_string_t* root_directory, cef_dictionary_value_t* manifest, cef_extension_handler_t* handler)
		{
			fixed (cef_request_context_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_string_t*, cef_dictionary_value_t*, cef_extension_handler_t*, void>)load_extension)(self, root_directory, manifest, handler);
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self, const cef_string_t* extension_id)*
		/// </summary>
		public void* did_load_extension;

		/// <summary>
		/// Returns true (1) if this context was used to load the extension identified
		/// by |extension_id|. Other contexts sharing the same storage will also have
		/// access to the extension (see HasExtension). This function must be called on
		/// the browser process UI thread.
		/// </summary>
		[NativeName("did_load_extension")]
		public unsafe int DidLoadExtension([Immutable]cef_string_t* extension_id)
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_string_t*, int>)did_load_extension)(self, extension_id);
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self, const cef_string_t* extension_id)*
		/// </summary>
		public void* has_extension;

		/// <summary>
		/// Returns true (1) if this context has access to the extension identified by
		/// |extension_id|. This may not be the context that was used to load the
		/// extension (see DidLoadExtension). This function must be called on the
		/// browser process UI thread.
		/// </summary>
		[NativeName("has_extension")]
		public unsafe int HasExtension([Immutable]cef_string_t* extension_id)
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_string_t*, int>)has_extension)(self, extension_id);
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self, cef_string_list_t extension_ids)*
		/// </summary>
		public void* get_extensions;

		/// <summary>
		/// Retrieve the list of all extensions that this context has access to (see
		/// HasExtension). |extension_ids| will be populated with the list of extension
		/// ID values. Returns true (1) on success. This function must be called on the
		/// browser process UI thread.
		/// </summary>
		[NativeName("get_extensions")]
		public unsafe int GetExtensions(cef_string_list_t extension_ids)
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_string_list_t, int>)get_extensions)(self, extension_ids);
			}
		}

		/// <summary>
		/// _cef_extension_t* (*)(_cef_request_context_t* self, const cef_string_t* extension_id)*
		/// </summary>
		public void* get_extension;

		/// <summary>
		/// Returns the extension matching |extension_id| or NULL if no matching
		/// extension is accessible in this context (see HasExtension). This function
		/// must be called on the browser process UI thread.
		/// </summary>
		[NativeName("get_extension")]
		public unsafe cef_extension_t* GetExtension([Immutable]cef_string_t* extension_id)
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_string_t*, cef_extension_t*>)get_extension)(self, extension_id);
			}
		}

		/// <summary>
		/// _cef_media_router_t* (*)(_cef_request_context_t* self, _cef_completion_callback_t* callback)*
		/// </summary>
		public void* get_media_router;

		/// <summary>
		/// Returns the MediaRouter object associated with this context.  If |callback|
		/// is non-NULL it will be executed asnychronously on the UI thread after the
		/// manager&apos;s context has been initialized.
		/// </summary>
		[NativeName("get_media_router")]
		public unsafe cef_media_router_t* GetMediaRouter(cef_completion_callback_t* callback)
		{
			fixed (cef_request_context_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_t*, cef_completion_callback_t*, cef_media_router_t*>)get_media_router)(self, callback);
			}
		}
	}
}

