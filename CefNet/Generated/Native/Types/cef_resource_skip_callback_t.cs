// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_resource_handler_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Callback for asynchronous continuation of cef_resource_handler_t::skip().
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_resource_skip_callback_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// void (*)(_cef_resource_skip_callback_t* self, int64 bytes_skipped)*
		/// </summary>
		public void* cont;

		/// <summary>
		/// Callback for asynchronous continuation of skip(). If |bytes_skipped| &gt; 0
		/// then either skip() will be called again until the requested number of bytes
		/// have been skipped or the request will proceed. If |bytes_skipped| 
		/// &lt;
		/// = 0 the
		/// request will fail with ERR_REQUEST_RANGE_NOT_SATISFIABLE.
		/// </summary>
		[NativeName("cont")]
		public unsafe void Continue(long bytes_skipped)
		{
			fixed (cef_resource_skip_callback_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_resource_skip_callback_t*, long, void>)cont)(self, bytes_skipped);
			}
		}
	}
}

