// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_request_context_handler_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Implement this structure to provide handler implementations. The handler
	/// instance will not be released until all objects related to the context have
	/// been destroyed.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_request_context_handler_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// void (*)(_cef_request_context_handler_t* self, _cef_request_context_t* request_context)*
		/// </summary>
		public void* on_request_context_initialized;

		/// <summary>
		/// Called on the browser process UI thread immediately after the request
		/// context has been initialized.
		/// </summary>
		[NativeName("on_request_context_initialized")]
		public unsafe void OnRequestContextInitialized(cef_request_context_t* request_context)
		{
			fixed (cef_request_context_handler_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_request_context_handler_t*, cef_request_context_t*, void>)on_request_context_initialized)(self, request_context);
			}
		}

		/// <summary>
		/// _cef_resource_request_handler_t* (*)(_cef_request_context_handler_t* self, _cef_browser_t* browser, _cef_frame_t* frame, _cef_request_t* request, int is_navigation, int is_download, const cef_string_t* request_initiator, int* disable_default_handling)*
		/// </summary>
		public void* get_resource_request_handler;

		/// <summary>
		/// Called on the browser process IO thread before a resource request is
		/// initiated. The |browser| and |frame| values represent the source of the
		/// request, and may be NULL for requests originating from service workers or
		/// cef_urlrequest_t. |request| represents the request contents and cannot be
		/// modified in this callback. |is_navigation| will be true (1) if the resource
		/// request is a navigation. |is_download| will be true (1) if the resource
		/// request is a download. |request_initiator| is the origin (scheme + domain)
		/// of the page that initiated the request. Set |disable_default_handling| to
		/// true (1) to disable default handling of the request, in which case it will
		/// need to be handled via cef_resource_request_handler_t::GetResourceHandler
		/// or it will be canceled. To allow the resource load to proceed with default
		/// handling return NULL. To specify a handler for the resource return a
		/// cef_resource_request_handler_t object. This function will not be called if
		/// the client associated with |browser| returns a non-NULL value from
		/// cef_request_handler_t::GetResourceRequestHandler for the same request
		/// (identified by cef_request_t::GetIdentifier).
		/// </summary>
		[NativeName("get_resource_request_handler")]
		public unsafe cef_resource_request_handler_t* GetResourceRequestHandler(cef_browser_t* browser, cef_frame_t* frame, cef_request_t* request, int is_navigation, int is_download, [Immutable]cef_string_t* request_initiator, int* disable_default_handling)
		{
			fixed (cef_request_context_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_request_context_handler_t*, cef_browser_t*, cef_frame_t*, cef_request_t*, int, int, cef_string_t*, int*, cef_resource_request_handler_t*>)get_resource_request_handler)(self, browser, frame, request, is_navigation, is_download, request_initiator, disable_default_handling);
			}
		}
	}
}

