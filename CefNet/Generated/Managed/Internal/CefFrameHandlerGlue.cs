// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_frame_handler_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet.Internal
{
	sealed partial class CefFrameHandlerGlue: CefFrameHandler, ICefFrameHandlerPrivate
	{
		private WebViewGlue _implementation;

		public CefFrameHandlerGlue(WebViewGlue impl)
		{
			_implementation = impl;
		}

		bool ICefFrameHandlerPrivate.AvoidOnFrameCreated()
		{
			return _implementation.AvoidOnFrameCreated();
		}

		protected internal unsafe override void OnFrameCreated(CefBrowser browser, CefFrame frame)
		{
			_implementation.OnFrameCreated(browser, frame);
		}

		bool ICefFrameHandlerPrivate.AvoidOnFrameAttached()
		{
			return _implementation.AvoidOnFrameAttached();
		}

		protected internal unsafe override void OnFrameAttached(CefBrowser browser, CefFrame frame, bool reattached)
		{
			_implementation.OnFrameAttached(browser, frame, reattached);
		}

		bool ICefFrameHandlerPrivate.AvoidOnFrameDetached()
		{
			return _implementation.AvoidOnFrameDetached();
		}

		protected internal unsafe override void OnFrameDetached(CefBrowser browser, CefFrame frame)
		{
			_implementation.OnFrameDetached(browser, frame);
		}

		bool ICefFrameHandlerPrivate.AvoidOnMainFrameChanged()
		{
			return _implementation.AvoidOnMainFrameChanged();
		}

		protected internal unsafe override void OnMainFrameChanged(CefBrowser browser, CefFrame oldFrame, CefFrame newFrame)
		{
			_implementation.OnMainFrameChanged(browser, oldFrame, newFrame);
		}

	}
}
