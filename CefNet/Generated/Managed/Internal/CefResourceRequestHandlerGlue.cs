// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_resource_request_handler_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet.Internal
{
	sealed partial class CefResourceRequestHandlerGlue: CefResourceRequestHandler, ICefResourceRequestHandlerPrivate
	{
		private WebViewGlue _implementation;

		public CefResourceRequestHandlerGlue(WebViewGlue impl)
		{
			_implementation = impl;
		}

		bool ICefResourceRequestHandlerPrivate.AvoidGetCookieAccessFilter()
		{
			return _implementation.AvoidGetCookieAccessFilter();
		}

		protected internal unsafe override CefCookieAccessFilter GetCookieAccessFilter(CefBrowser browser, CefFrame frame, CefRequest request)
		{
			return _implementation.GetCookieAccessFilter(browser, frame, request);
		}

		bool ICefResourceRequestHandlerPrivate.AvoidOnBeforeResourceLoad()
		{
			return _implementation.AvoidOnBeforeResourceLoad();
		}

		protected internal unsafe override CefReturnValue OnBeforeResourceLoad(CefBrowser browser, CefFrame frame, CefRequest request, CefCallback callback)
		{
			return _implementation.OnBeforeResourceLoad(browser, frame, request, callback);
		}

		bool ICefResourceRequestHandlerPrivate.AvoidGetResourceHandler()
		{
			return _implementation.AvoidGetResourceHandler();
		}

		protected internal unsafe override CefResourceHandler GetResourceHandler(CefBrowser browser, CefFrame frame, CefRequest request)
		{
			return _implementation.GetResourceHandler(browser, frame, request);
		}

		bool ICefResourceRequestHandlerPrivate.AvoidOnResourceRedirect()
		{
			return _implementation.AvoidOnResourceRedirect();
		}

		protected internal unsafe override void OnResourceRedirect(CefBrowser browser, CefFrame frame, CefRequest request, CefResponse response, ref string newUrl)
		{
			_implementation.OnResourceRedirect(browser, frame, request, response, ref newUrl);
		}

		bool ICefResourceRequestHandlerPrivate.AvoidOnResourceResponse()
		{
			return _implementation.AvoidOnResourceResponse();
		}

		protected internal unsafe override bool OnResourceResponse(CefBrowser browser, CefFrame frame, CefRequest request, CefResponse response)
		{
			return _implementation.OnResourceResponse(browser, frame, request, response);
		}

		bool ICefResourceRequestHandlerPrivate.AvoidGetResourceResponseFilter()
		{
			return _implementation.AvoidGetResourceResponseFilter();
		}

		protected internal unsafe override CefResponseFilter GetResourceResponseFilter(CefBrowser browser, CefFrame frame, CefRequest request, CefResponse response)
		{
			return _implementation.GetResourceResponseFilter(browser, frame, request, response);
		}

		bool ICefResourceRequestHandlerPrivate.AvoidOnResourceLoadComplete()
		{
			return _implementation.AvoidOnResourceLoadComplete();
		}

		protected internal unsafe override void OnResourceLoadComplete(CefBrowser browser, CefFrame frame, CefRequest request, CefResponse response, CefUrlRequestStatus status, long receivedContentLength)
		{
			_implementation.OnResourceLoadComplete(browser, frame, request, response, status, receivedContentLength);
		}

		bool ICefResourceRequestHandlerPrivate.AvoidOnProtocolExecution()
		{
			return _implementation.AvoidOnProtocolExecution();
		}

		protected internal unsafe override void OnProtocolExecution(CefBrowser browser, CefFrame frame, CefRequest request, ref int allowOsExecution)
		{
			_implementation.OnProtocolExecution(browser, frame, request, ref allowOsExecution);
		}

	}
}
