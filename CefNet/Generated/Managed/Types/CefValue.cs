// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_value_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Structure that wraps other data value types. Complex types (binary,
	/// dictionary and list) will be referenced but not owned by this object. Can be
	/// used on any process and thread.
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial class CefValue : CefBaseRefCounted<cef_value_t>
	{
		internal static unsafe CefValue Create(IntPtr instance)
		{
			return new CefValue((cef_value_t*)instance);
		}

		public CefValue(cef_value_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		/// <summary>
		/// Gets a value indicating whether the underlying data is valid. This will always be true
		/// (1) for simple types. For complex types (binary, dictionary and list) the
		/// underlying data may become invalid if owned by another object (e.g. list or
		/// dictionary) and that other object is then modified or destroyed. This value
		/// object can be re-used by calling Set*() even if the underlying data is
		/// invalid.
		/// </summary>
		public unsafe virtual bool IsValid
		{
			get
			{
				return SafeCall(NativeInstance->IsValid() != 0);
			}
		}

		/// <summary>
		/// Gets a value indicating whether the underlying data is owned by another object.
		/// </summary>
		public unsafe virtual bool IsOwned
		{
			get
			{
				return SafeCall(NativeInstance->IsOwned() != 0);
			}
		}

		/// <summary>
		/// Gets a value indicating whether the underlying data is read-only. Some APIs may expose
		/// read-only objects.
		/// </summary>
		public unsafe virtual bool IsReadOnly
		{
			get
			{
				return SafeCall(NativeInstance->IsReadOnly() != 0);
			}
		}

		/// <summary>
		/// Gets the underlying value type.
		/// </summary>
		public unsafe virtual CefValueType Type
		{
			get
			{
				return SafeCall(NativeInstance->GetCefType());
			}
		}

		/// <summary>
		/// Returns true (1) if this object and |that| object have the same underlying
		/// data. If true (1) modifications to this object will also affect |that|
		/// object and vice-versa.
		/// </summary>
		public unsafe virtual bool IsSame(CefValue that)
		{
			return SafeCall(NativeInstance->IsSame((that != null) ? that.GetNativeInstance() : null) != 0);
		}

		/// <summary>
		/// Returns true (1) if this object and |that| object have an equivalent
		/// underlying value but are not necessarily the same object.
		/// </summary>
		public unsafe virtual bool IsEqual(CefValue that)
		{
			return SafeCall(NativeInstance->IsEqual((that != null) ? that.GetNativeInstance() : null) != 0);
		}

		/// <summary>
		/// Returns a copy of this object. The underlying data will also be copied.
		/// </summary>
		public unsafe virtual CefValue Copy()
		{
			return SafeCall(CefValue.Wrap(CefValue.Create, NativeInstance->Copy()));
		}

		/// <summary>
		/// Returns the underlying value as type bool.
		/// </summary>
		public unsafe virtual int GetBool()
		{
			return SafeCall(NativeInstance->GetBool());
		}

		/// <summary>
		/// Returns the underlying value as type int.
		/// </summary>
		public unsafe virtual int GetInt()
		{
			return SafeCall(NativeInstance->GetInt());
		}

		/// <summary>
		/// Returns the underlying value as type double.
		/// </summary>
		public unsafe virtual double GetDouble()
		{
			return SafeCall(NativeInstance->GetDouble());
		}

		/// <summary>
		/// Returns the underlying value as type string.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public unsafe virtual string GetString()
		{
			return SafeCall(CefString.ReadAndFree(NativeInstance->GetString()));
		}

		/// <summary>
		/// Returns the underlying value as type binary. The returned reference may
		/// become invalid if the value is owned by another object or if ownership is
		/// transferred to another object in the future. To maintain a reference to the
		/// value after assigning ownership to a dictionary or list pass this object to
		/// the set_value() function instead of passing the returned reference to
		/// set_binary().
		/// </summary>
		public unsafe virtual CefBinaryValue GetBinary()
		{
			return SafeCall(CefBinaryValue.Wrap(CefBinaryValue.Create, NativeInstance->GetBinary()));
		}

		/// <summary>
		/// Returns the underlying value as type dictionary. The returned reference may
		/// become invalid if the value is owned by another object or if ownership is
		/// transferred to another object in the future. To maintain a reference to the
		/// value after assigning ownership to a dictionary or list pass this object to
		/// the set_value() function instead of passing the returned reference to
		/// set_dictionary().
		/// </summary>
		public unsafe virtual CefDictionaryValue GetDictionary()
		{
			return SafeCall(CefDictionaryValue.Wrap(CefDictionaryValue.Create, NativeInstance->GetDictionary()));
		}

		/// <summary>
		/// Returns the underlying value as type list. The returned reference may
		/// become invalid if the value is owned by another object or if ownership is
		/// transferred to another object in the future. To maintain a reference to the
		/// value after assigning ownership to a dictionary or list pass this object to
		/// the set_value() function instead of passing the returned reference to
		/// set_list().
		/// </summary>
		public unsafe virtual CefListValue GetList()
		{
			return SafeCall(CefListValue.Wrap(CefListValue.Create, NativeInstance->GetList()));
		}

		/// <summary>
		/// Sets the underlying value as type null. Returns true (1) if the value was
		/// set successfully.
		/// </summary>
		public unsafe virtual bool SetNull()
		{
			return SafeCall(NativeInstance->SetNull() != 0);
		}

		/// <summary>
		/// Sets the underlying value as type bool. Returns true (1) if the value was
		/// set successfully.
		/// </summary>
		public unsafe virtual bool SetBool(bool value)
		{
			return SafeCall(NativeInstance->SetBool(value ? 1 : 0) != 0);
		}

		/// <summary>
		/// Sets the underlying value as type int. Returns true (1) if the value was
		/// set successfully.
		/// </summary>
		public unsafe virtual bool SetInt(int value)
		{
			return SafeCall(NativeInstance->SetInt(value) != 0);
		}

		/// <summary>
		/// Sets the underlying value as type double. Returns true (1) if the value was
		/// set successfully.
		/// </summary>
		public unsafe virtual bool SetDouble(double value)
		{
			return SafeCall(NativeInstance->SetDouble(value) != 0);
		}

		/// <summary>
		/// Sets the underlying value as type string. Returns true (1) if the value was
		/// set successfully.
		/// </summary>
		public unsafe virtual bool SetString(string value)
		{
			fixed (char* s0 = value)
			{
				var cstr0 = new cef_string_t { Str = s0, Length = value != null ? value.Length : 0 };
				return SafeCall(NativeInstance->SetString(&cstr0) != 0);
			}
		}

		/// <summary>
		/// Sets the underlying value as type binary. Returns true (1) if the value was
		/// set successfully. This object keeps a reference to |value| and ownership of
		/// the underlying data remains unchanged.
		/// </summary>
		public unsafe virtual bool SetBinary(CefBinaryValue value)
		{
			return SafeCall(NativeInstance->SetBinary((value != null) ? value.GetNativeInstance() : null) != 0);
		}

		/// <summary>
		/// Sets the underlying value as type dict. Returns true (1) if the value was
		/// set successfully. This object keeps a reference to |value| and ownership of
		/// the underlying data remains unchanged.
		/// </summary>
		public unsafe virtual bool SetDictionary(CefDictionaryValue value)
		{
			return SafeCall(NativeInstance->SetDictionary((value != null) ? value.GetNativeInstance() : null) != 0);
		}

		/// <summary>
		/// Sets the underlying value as type list. Returns true (1) if the value was
		/// set successfully. This object keeps a reference to |value| and ownership of
		/// the underlying data remains unchanged.
		/// </summary>
		public unsafe virtual bool SetList(CefListValue value)
		{
			return SafeCall(NativeInstance->SetList((value != null) ? value.GetNativeInstance() : null) != 0);
		}
	}
}
