// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_media_sink_device_info_callback_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Callback structure for cef_media_sink_t::GetDeviceInfo. The functions of this
	/// structure will be called on the browser process UI thread.
	/// </summary>
	/// <remarks>
	/// Role: Handler
	/// </remarks>
	public unsafe partial class CefMediaSinkDeviceInfoCallback : CefBaseRefCounted<cef_media_sink_device_info_callback_t>, ICefMediaSinkDeviceInfoCallbackPrivate
	{
#if NET_LESS_5_0
		private static readonly OnMediaSinkDeviceInfoDelegate fnOnMediaSinkDeviceInfo = OnMediaSinkDeviceInfoImpl;

#endif // NET_LESS_5_0
		internal static unsafe CefMediaSinkDeviceInfoCallback Create(IntPtr instance)
		{
			return new CefMediaSinkDeviceInfoCallback((cef_media_sink_device_info_callback_t*)instance);
		}

		public CefMediaSinkDeviceInfoCallback()
		{
			cef_media_sink_device_info_callback_t* self = this.NativeInstance;
			#if NET_LESS_5_0
			self->on_media_sink_device_info = (void*)Marshal.GetFunctionPointerForDelegate(fnOnMediaSinkDeviceInfo);
			#else
			self->on_media_sink_device_info = (delegate* unmanaged[Stdcall]<cef_media_sink_device_info_callback_t*, cef_media_sink_device_info_t*, void>)&OnMediaSinkDeviceInfoImpl;
			#endif
		}

		public CefMediaSinkDeviceInfoCallback(cef_media_sink_device_info_callback_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		[MethodImpl(MethodImplOptions.ForwardRef)]
		extern bool ICefMediaSinkDeviceInfoCallbackPrivate.AvoidOnMediaSinkDeviceInfo();

		/// <summary>
		/// Method that will be executed asyncronously once device information has been
		/// retrieved.
		/// </summary>
		protected internal unsafe virtual void OnMediaSinkDeviceInfo(CefMediaSinkDeviceInfo deviceInfo)
		{
		}

#if NET_LESS_5_0
		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private unsafe delegate void OnMediaSinkDeviceInfoDelegate(cef_media_sink_device_info_callback_t* self, cef_media_sink_device_info_t* device_info);

#endif // NET_LESS_5_0
		// void (*)(_cef_media_sink_device_info_callback_t* self, const const _cef_media_sink_device_info_t* device_info)*
#if !NET_LESS_5_0
		[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
#endif
		private static unsafe void OnMediaSinkDeviceInfoImpl(cef_media_sink_device_info_callback_t* self, cef_media_sink_device_info_t* device_info)
		{
			var instance = GetInstance((IntPtr)self) as CefMediaSinkDeviceInfoCallback;
			if (instance == null || ((ICefMediaSinkDeviceInfoCallbackPrivate)instance).AvoidOnMediaSinkDeviceInfo())
			{
				return;
			}
			instance.OnMediaSinkDeviceInfo(*(CefMediaSinkDeviceInfo*)device_info);
		}
	}
}
