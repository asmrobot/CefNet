// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_scheme_handler_factory_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Structure that creates cef_resource_handler_t instances for handling scheme
	/// requests. The functions of this structure will always be called on the IO
	/// thread.
	/// </summary>
	/// <remarks>
	/// Role: Handler
	/// </remarks>
	public unsafe partial class CefSchemeHandlerFactory : CefBaseRefCounted<cef_scheme_handler_factory_t>, ICefSchemeHandlerFactoryPrivate
	{
#if NET_LESS_5_0
		private static readonly CreateDelegate fnCreate = CreateImpl;

#endif // NET_LESS_5_0
		internal static unsafe CefSchemeHandlerFactory Create(IntPtr instance)
		{
			return new CefSchemeHandlerFactory((cef_scheme_handler_factory_t*)instance);
		}

		public CefSchemeHandlerFactory()
		{
			cef_scheme_handler_factory_t* self = this.NativeInstance;
			#if NET_LESS_5_0
			self->create = (void*)Marshal.GetFunctionPointerForDelegate(fnCreate);
			#else
			self->create = (delegate* unmanaged[Stdcall]<cef_scheme_handler_factory_t*, cef_browser_t*, cef_frame_t*, cef_string_t*, cef_request_t*, cef_resource_handler_t*>)&CreateImpl;
			#endif
		}

		public CefSchemeHandlerFactory(cef_scheme_handler_factory_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		[MethodImpl(MethodImplOptions.ForwardRef)]
		extern bool ICefSchemeHandlerFactoryPrivate.AvoidCreate();

		/// <summary>
		/// Return a new resource handler instance to handle the request or an NULL
		/// reference to allow default handling of the request. |browser| and |frame|
		/// will be the browser window and frame respectively that originated the
		/// request or NULL if the request did not originate from a browser window (for
		/// example, if the request came from cef_urlrequest_t). The |request| object
		/// passed to this function cannot be modified.
		/// </summary>
		protected internal unsafe virtual CefResourceHandler Create(CefBrowser browser, CefFrame frame, string schemeName, CefRequest request)
		{
			return default;
		}

#if NET_LESS_5_0
		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private unsafe delegate cef_resource_handler_t* CreateDelegate(cef_scheme_handler_factory_t* self, cef_browser_t* browser, cef_frame_t* frame, cef_string_t* scheme_name, cef_request_t* request);

#endif // NET_LESS_5_0
		// _cef_resource_handler_t* (*)(_cef_scheme_handler_factory_t* self, _cef_browser_t* browser, _cef_frame_t* frame, const cef_string_t* scheme_name, _cef_request_t* request)*
#if !NET_LESS_5_0
		[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
#endif
		private static unsafe cef_resource_handler_t* CreateImpl(cef_scheme_handler_factory_t* self, cef_browser_t* browser, cef_frame_t* frame, cef_string_t* scheme_name, cef_request_t* request)
		{
			var instance = GetInstance((IntPtr)self) as CefSchemeHandlerFactory;
			if (instance == null || ((ICefSchemeHandlerFactoryPrivate)instance).AvoidCreate())
			{
				ReleaseIfNonNull((cef_base_ref_counted_t*)browser);
				ReleaseIfNonNull((cef_base_ref_counted_t*)frame);
				ReleaseIfNonNull((cef_base_ref_counted_t*)request);
				return default;
			}
			CefResourceHandler rv = instance.Create(CefBrowser.Wrap(CefBrowser.Create, browser), CefFrame.Wrap(CefFrame.Create, frame), CefString.Read(scheme_name), CefRequest.Wrap(CefRequest.Create, request));
			if (rv == null)
				return null;
			return (rv != null) ? rv.GetNativeInstance() : null;
		}
	}
}
