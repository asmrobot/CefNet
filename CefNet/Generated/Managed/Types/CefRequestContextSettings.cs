// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_request_context_settings_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Request context initialization settings. Specify NULL or 0 to get the
	/// recommended default values.
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial class CefRequestContextSettings : IDisposable
	{
		private cef_request_context_settings_t* _instance;

		private readonly bool _disposable;

		public CefRequestContextSettings()
		{
			_disposable = true;
			_instance = (cef_request_context_settings_t*)CefStructure.Allocate(sizeof(cef_request_context_settings_t));
			_instance->size = new UIntPtr((uint)sizeof(cef_request_context_settings_t));
		}

		internal static unsafe CefRequestContextSettings Create(IntPtr instance)
		{
			return new CefRequestContextSettings((cef_request_context_settings_t*)instance);
		}

		public CefRequestContextSettings(cef_request_context_settings_t* instance)
		{
			_instance = instance;
		}

		public cef_request_context_settings_t* NativeInstance
		{
			get
			{
				return _instance;
			}
		}

		public cef_request_context_settings_t* GetNativeInstance()
		{
			return _instance;
		}

		/// <summary>
		/// Size of this structure.
		/// </summary>
		public long Size
		{
			get
			{
				return (long)(_instance->size);
			}
			set
			{
				_instance->size = new UIntPtr((ulong)value);
			}
		}

		/// <summary>
		/// The location where cache data for this request context will be stored on
		/// disk. If this value is non-empty then it must be an absolute path that is
		/// either equal to or a child directory of CefSettings.root_cache_path. If
		/// this value is empty then browsers will be created in &quot;incognito mode&quot; where
		/// in-memory caches are used for storage and no data is persisted to disk.
		/// HTML5 databases such as localStorage will only persist across sessions if a
		/// cache path is specified. To share the global browser cache and related
		/// configuration set this value to match the CefSettings.cache_path value.
		/// </summary>
		public string CachePath
		{
			get
			{
				return CefString.Read(&_instance->cache_path);
			}
			set
			{
				CefString.Replace(&_instance->cache_path, value);
			}
		}

		/// <summary>
		/// To persist session cookies (cookies without an expiry date or validity
		/// interval) by default when using the global cookie manager set this value to
		/// true (1). Session cookies are generally intended to be transient and most
		/// Web browsers do not persist them. Can be set globally using the
		/// CefSettings.persist_session_cookies value. This value will be ignored if
		/// |cache_path| is empty or if it matches the CefSettings.cache_path value.
		/// </summary>
		public bool PersistSessionCookies
		{
			get
			{
				return _instance->persist_session_cookies != 0;
			}
			set
			{
				_instance->persist_session_cookies = value ? 1 : 0;
			}
		}

		/// <summary>
		/// To persist user preferences as a JSON file in the cache path directory set
		/// this value to true (1). Can be set globally using the
		/// CefSettings.persist_user_preferences value. This value will be ignored if
		/// |cache_path| is empty or if it matches the CefSettings.cache_path value.
		/// </summary>
		public bool PersistUserPreferences
		{
			get
			{
				return _instance->persist_user_preferences != 0;
			}
			set
			{
				_instance->persist_user_preferences = value ? 1 : 0;
			}
		}

		/// <summary>
		/// Comma delimited ordered list of language codes without any whitespace that
		/// will be used in the &quot;Accept-Language&quot; HTTP header. Can be set globally
		/// using the CefSettings.accept_language_list value or overridden on a per-
		/// browser basis using the CefBrowserSettings.accept_language_list value. If
		/// all values are empty then &quot;en-US,en&quot; will be used. This value will be
		/// ignored if |cache_path| matches the CefSettings.cache_path value.
		/// </summary>
		public string AcceptLanguageList
		{
			get
			{
				return CefString.Read(&_instance->accept_language_list);
			}
			set
			{
				CefString.Replace(&_instance->accept_language_list, value);
			}
		}

		/// <summary>
		/// Comma delimited list of schemes supported by the associated
		/// CefCookieManager. If |cookieable_schemes_exclude_defaults| is false (0) the
		/// default schemes (&quot;http&quot;, &quot;https&quot;, &quot;ws&quot; and &quot;wss&quot;) will also be supported.
		/// Specifying a |cookieable_schemes_list| value and setting
		/// |cookieable_schemes_exclude_defaults| to true (1) will disable all loading
		/// and saving of cookies for this manager. These values will be ignored if
		/// |cache_path| matches the CefSettings.cache_path value.
		/// </summary>
		public string CookieableSchemesList
		{
			get
			{
				return CefString.Read(&_instance->cookieable_schemes_list);
			}
			set
			{
				CefString.Replace(&_instance->cookieable_schemes_list, value);
			}
		}

		public int CookieableSchemesExcludeDefaults
		{
			get
			{
				return _instance->cookieable_schemes_exclude_defaults;
			}
			set
			{
				_instance->cookieable_schemes_exclude_defaults = value;
			}
		}

		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}

		protected virtual void Dispose(bool disposing)
		{
			if (_disposable && _instance != null)
			{
				CachePath = null;
				AcceptLanguageList = null;
				CookieableSchemesList = null;
				Marshal.FreeHGlobal((IntPtr)_instance);
				_instance = null;}
		}

		~CefRequestContextSettings()
		{
			Dispose(false);
		}
	}
}
