// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_x509cert_principal_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Structure representing the issuer or subject field of an X.509 certificate.
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial class CefX509CertPrincipal : CefBaseRefCounted<cef_x509cert_principal_t>
	{
		internal static unsafe CefX509CertPrincipal Create(IntPtr instance)
		{
			return new CefX509CertPrincipal((cef_x509cert_principal_t*)instance);
		}

		public CefX509CertPrincipal(cef_x509cert_principal_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		/// <summary>
		/// Gets a name that can be used to represent the issuer. It tries in this
		/// order: Common Name (CN), Organization Name (O) and Organizational Unit Name
		/// (OU) and returns the first non-NULL one found.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public unsafe virtual string DisplayName
		{
			get
			{
				return SafeCall(CefString.ReadAndFree(NativeInstance->GetDisplayName()));
			}
		}

		/// <summary>
		/// Gets the common name.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public unsafe virtual string CommonName
		{
			get
			{
				return SafeCall(CefString.ReadAndFree(NativeInstance->GetCommonName()));
			}
		}

		/// <summary>
		/// Gets the locality name.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public unsafe virtual string LocalityName
		{
			get
			{
				return SafeCall(CefString.ReadAndFree(NativeInstance->GetLocalityName()));
			}
		}

		/// <summary>
		/// Gets the state or province name.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public unsafe virtual string StateOrProvinceName
		{
			get
			{
				return SafeCall(CefString.ReadAndFree(NativeInstance->GetStateOrProvinceName()));
			}
		}

		/// <summary>
		/// Gets the country name.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public unsafe virtual string CountryName
		{
			get
			{
				return SafeCall(CefString.ReadAndFree(NativeInstance->GetCountryName()));
			}
		}

		/// <summary>
		/// Retrieve the list of street addresses.
		/// </summary>
		public unsafe virtual void GetStreetAddresses(CefStringList addresses)
		{
			NativeInstance->GetStreetAddresses(addresses.GetNativeInstance());
			GC.KeepAlive(this);
		}

		/// <summary>
		/// Retrieve the list of organization names.
		/// </summary>
		public unsafe virtual void GetOrganizationNames(CefStringList names)
		{
			NativeInstance->GetOrganizationNames(names.GetNativeInstance());
			GC.KeepAlive(this);
		}

		/// <summary>
		/// Retrieve the list of organization unit names.
		/// </summary>
		public unsafe virtual void GetOrganizationUnitNames(CefStringList names)
		{
			NativeInstance->GetOrganizationUnitNames(names.GetNativeInstance());
			GC.KeepAlive(this);
		}

		/// <summary>
		/// Retrieve the list of domain components.
		/// </summary>
		public unsafe virtual void GetDomainComponents(CefStringList components)
		{
			NativeInstance->GetDomainComponents(components.GetNativeInstance());
			GC.KeepAlive(this);
		}
	}
}
