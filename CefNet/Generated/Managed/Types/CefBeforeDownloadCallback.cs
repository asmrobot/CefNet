// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_before_download_callback_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Callback structure used to asynchronously continue a download.
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial class CefBeforeDownloadCallback : CefBaseRefCounted<cef_before_download_callback_t>
	{
		internal static unsafe CefBeforeDownloadCallback Create(IntPtr instance)
		{
			return new CefBeforeDownloadCallback((cef_before_download_callback_t*)instance);
		}

		public CefBeforeDownloadCallback(cef_before_download_callback_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		/// <summary>
		/// Call to continue the download. Set |download_path| to the full file path
		/// for the download including the file name or leave blank to use the
		/// suggested name and the default temp directory. Set |show_dialog| to true
		/// (1) if you do wish to show the default &quot;Save As&quot; dialog.
		/// </summary>
		public unsafe virtual void Continue(string downloadPath, bool showDialog)
		{
			fixed (char* s0 = downloadPath)
			{
				var cstr0 = new cef_string_t { Str = s0, Length = downloadPath != null ? downloadPath.Length : 0 };
				NativeInstance->Continue(&cstr0, showDialog ? 1 : 0);
			}
			GC.KeepAlive(this);
		}
	}
}
