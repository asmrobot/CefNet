// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_web_plugin_info_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Information about a specific web plugin.
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial class CefWebPluginInfo : CefBaseRefCounted<cef_web_plugin_info_t>
	{
		internal static unsafe CefWebPluginInfo Create(IntPtr instance)
		{
			return new CefWebPluginInfo((cef_web_plugin_info_t*)instance);
		}

		public CefWebPluginInfo(cef_web_plugin_info_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		/// <summary>
		/// Gets the plugin name.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public unsafe virtual string Name
		{
			get
			{
				return SafeCall(CefString.ReadAndFree(NativeInstance->GetName()));
			}
		}

		/// <summary>
		/// Gets the plugin file path (DLL/bundle/library).
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public unsafe virtual string Path
		{
			get
			{
				return SafeCall(CefString.ReadAndFree(NativeInstance->GetPath()));
			}
		}

		/// <summary>
		/// Gets the version of the plugin (may be OS-specific).
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public unsafe virtual string Version
		{
			get
			{
				return SafeCall(CefString.ReadAndFree(NativeInstance->GetVersion()));
			}
		}

		/// <summary>
		/// Gets a description of the plugin from the version information.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public unsafe virtual string Description
		{
			get
			{
				return SafeCall(CefString.ReadAndFree(NativeInstance->GetDescription()));
			}
		}
	}
}
