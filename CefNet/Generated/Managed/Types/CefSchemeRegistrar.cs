// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_scheme_registrar_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Structure that manages custom scheme registrations.
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial class CefSchemeRegistrar : CefBaseScoped<cef_scheme_registrar_t>
	{
		internal static unsafe CefSchemeRegistrar Create(IntPtr instance)
		{
			return new CefSchemeRegistrar((cef_scheme_registrar_t*)instance);
		}

		public CefSchemeRegistrar(cef_scheme_registrar_t* instance)
			: base((cef_base_scoped_t*)instance)
		{
		}

		/// <summary>
		/// Register a custom scheme. This function should not be called for the built-
		/// in HTTP, HTTPS, FILE, FTP, ABOUT and DATA schemes.
		/// See cef_scheme_options_t for possible values for |options|.
		/// This function may be called on any thread. It should only be called once
		/// per unique |scheme_name| value. If |scheme_name| is already registered or
		/// if an error occurs this function will return false (0).
		/// </summary>
		public unsafe virtual bool AddCustomScheme(string schemeName, int options)
		{
			fixed (char* s0 = schemeName)
			{
				var cstr0 = new cef_string_t { Str = s0, Length = schemeName != null ? schemeName.Length : 0 };
				return SafeCall(NativeInstance->AddCustomScheme(&cstr0, options) != 0);
			}
		}
	}
}
