// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_task_runner_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Structure that asynchronously executes tasks on the associated thread. It is
	/// safe to call the functions of this structure on any thread.
	/// CEF maintains multiple internal threads that are used for handling different
	/// types of tasks in different processes. The cef_thread_id_t definitions in
	/// cef_types.h list the common CEF threads. Task runners are also available for
	/// other CEF threads as appropriate (for example, V8 WebWorker threads).
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial class CefTaskRunner : CefBaseRefCounted<cef_task_runner_t>
	{
		internal static unsafe CefTaskRunner Create(IntPtr instance)
		{
			return new CefTaskRunner((cef_task_runner_t*)instance);
		}

		public CefTaskRunner(cef_task_runner_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		/// <summary>
		/// Returns true (1) if this object is pointing to the same task runner as
		/// |that| object.
		/// </summary>
		public unsafe virtual bool IsSame(CefTaskRunner that)
		{
			return SafeCall(NativeInstance->IsSame((that != null) ? that.GetNativeInstance() : null) != 0);
		}

		/// <summary>
		/// Returns true (1) if this task runner belongs to the current thread.
		/// </summary>
		public unsafe virtual bool BelongsToCurrentThread()
		{
			return SafeCall(NativeInstance->BelongsToCurrentThread() != 0);
		}

		/// <summary>
		/// Returns true (1) if this task runner is for the specified CEF thread.
		/// </summary>
		public unsafe virtual bool BelongsToThread(CefThreadId threadId)
		{
			return SafeCall(NativeInstance->BelongsToThread(threadId) != 0);
		}

		/// <summary>
		/// Post a task for execution on the thread associated with this task runner.
		/// Execution will occur asynchronously.
		/// </summary>
		public unsafe virtual int PostTask(CefTask task)
		{
			return SafeCall(NativeInstance->PostTask((task != null) ? task.GetNativeInstance() : null));
		}

		/// <summary>
		/// Post a task for delayed execution on the thread associated with this task
		/// runner. Execution will occur asynchronously. Delayed tasks are not
		/// supported on V8 WebWorker threads and will be executed without the
		/// specified delay.
		/// </summary>
		public unsafe virtual int PostDelayedTask(CefTask task, long delayMs)
		{
			return SafeCall(NativeInstance->PostDelayedTask((task != null) ? task.GetNativeInstance() : null, delayMs));
		}
	}
}
