// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_keyboard_handler_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Implement this structure to handle events related to keyboard input. The
	/// functions of this structure will be called on the UI thread.
	/// </summary>
	/// <remarks>
	/// Role: Handler
	/// </remarks>
	public unsafe partial class CefKeyboardHandler : CefBaseRefCounted<cef_keyboard_handler_t>, ICefKeyboardHandlerPrivate
	{
#if NET_LESS_5_0
		private static readonly OnPreKeyEventDelegate fnOnPreKeyEvent = OnPreKeyEventImpl;

		private static readonly OnKeyEventDelegate fnOnKeyEvent = OnKeyEventImpl;

#endif // NET_LESS_5_0
		internal static unsafe CefKeyboardHandler Create(IntPtr instance)
		{
			return new CefKeyboardHandler((cef_keyboard_handler_t*)instance);
		}

		public CefKeyboardHandler()
		{
			cef_keyboard_handler_t* self = this.NativeInstance;
			#if NET_LESS_5_0
			self->on_pre_key_event = (void*)Marshal.GetFunctionPointerForDelegate(fnOnPreKeyEvent);
			self->on_key_event = (void*)Marshal.GetFunctionPointerForDelegate(fnOnKeyEvent);
			#else
			self->on_pre_key_event = (delegate* unmanaged[Stdcall]<cef_keyboard_handler_t*, cef_browser_t*, cef_key_event_t*, CefEventHandle, int*, int>)&OnPreKeyEventImpl;
			self->on_key_event = (delegate* unmanaged[Stdcall]<cef_keyboard_handler_t*, cef_browser_t*, cef_key_event_t*, CefEventHandle, int>)&OnKeyEventImpl;
			#endif
		}

		public CefKeyboardHandler(cef_keyboard_handler_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		[MethodImpl(MethodImplOptions.ForwardRef)]
		extern bool ICefKeyboardHandlerPrivate.AvoidOnPreKeyEvent();

		/// <summary>
		/// Called before a keyboard event is sent to the renderer. |event| contains
		/// information about the keyboard event. |os_event| is the operating system
		/// event message, if any. Return true (1) if the event was handled or false
		/// (0) otherwise. If the event will be handled in on_key_event() as a keyboard
		/// shortcut set |is_keyboard_shortcut| to true (1) and return false (0).
		/// </summary>
		protected internal unsafe virtual bool OnPreKeyEvent(CefBrowser browser, CefKeyEvent @event, CefEventHandle osEvent, ref int isKeyboardShortcut)
		{
			return default;
		}

#if NET_LESS_5_0
		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private unsafe delegate int OnPreKeyEventDelegate(cef_keyboard_handler_t* self, cef_browser_t* browser, cef_key_event_t* @event, CefEventHandle os_event, int* is_keyboard_shortcut);

#endif // NET_LESS_5_0
		// int (*)(_cef_keyboard_handler_t* self, _cef_browser_t* browser, const const _cef_key_event_t* event, CefEventHandle os_event, int* is_keyboard_shortcut)*
#if !NET_LESS_5_0
		[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
#endif
		private static unsafe int OnPreKeyEventImpl(cef_keyboard_handler_t* self, cef_browser_t* browser, cef_key_event_t* @event, CefEventHandle os_event, int* is_keyboard_shortcut)
		{
			var instance = GetInstance((IntPtr)self) as CefKeyboardHandler;
			if (instance == null || ((ICefKeyboardHandlerPrivate)instance).AvoidOnPreKeyEvent())
			{
				ReleaseIfNonNull((cef_base_ref_counted_t*)browser);
				return default;
			}
			return instance.OnPreKeyEvent(CefBrowser.Wrap(CefBrowser.Create, browser), *(CefKeyEvent*)@event, os_event, ref *is_keyboard_shortcut) ? 1 : 0;
		}

		[MethodImpl(MethodImplOptions.ForwardRef)]
		extern bool ICefKeyboardHandlerPrivate.AvoidOnKeyEvent();

		/// <summary>
		/// Called after the renderer and JavaScript in the page has had a chance to
		/// handle the event. |event| contains information about the keyboard event.
		/// |os_event| is the operating system event message, if any. Return true (1)
		/// if the keyboard event was handled or false (0) otherwise.
		/// </summary>
		protected internal unsafe virtual bool OnKeyEvent(CefBrowser browser, CefKeyEvent @event, CefEventHandle osEvent)
		{
			return default;
		}

#if NET_LESS_5_0
		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private unsafe delegate int OnKeyEventDelegate(cef_keyboard_handler_t* self, cef_browser_t* browser, cef_key_event_t* @event, CefEventHandle os_event);

#endif // NET_LESS_5_0
		// int (*)(_cef_keyboard_handler_t* self, _cef_browser_t* browser, const const _cef_key_event_t* event, CefEventHandle os_event)*
#if !NET_LESS_5_0
		[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
#endif
		private static unsafe int OnKeyEventImpl(cef_keyboard_handler_t* self, cef_browser_t* browser, cef_key_event_t* @event, CefEventHandle os_event)
		{
			var instance = GetInstance((IntPtr)self) as CefKeyboardHandler;
			if (instance == null || ((ICefKeyboardHandlerPrivate)instance).AvoidOnKeyEvent())
			{
				ReleaseIfNonNull((cef_base_ref_counted_t*)browser);
				return default;
			}
			return instance.OnKeyEvent(CefBrowser.Wrap(CefBrowser.Create, browser), *(CefKeyEvent*)@event, os_event) ? 1 : 0;
		}
	}
}
