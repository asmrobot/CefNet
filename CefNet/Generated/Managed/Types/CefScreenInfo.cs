// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_screen_info_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Screen information used when window rendering is disabled. This structure is
	/// passed as a parameter to CefRenderHandler::GetScreenInfo and should be filled
	/// in by the client.
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial struct CefScreenInfo
	{
		private cef_screen_info_t _instance;

		/// <summary>
		/// Device scale factor. Specifies the ratio between physical and logical
		/// pixels.
		/// </summary>
		public float DeviceScaleFactor
		{
			get
			{
				return _instance.device_scale_factor;
			}
			set
			{
				_instance.device_scale_factor = value;
			}
		}

		/// <summary>
		/// The screen depth in bits per pixel.
		/// </summary>
		public int Depth
		{
			get
			{
				return _instance.depth;
			}
			set
			{
				_instance.depth = value;
			}
		}

		/// <summary>
		/// The bits per color component. This assumes that the colors are balanced
		/// equally.
		/// </summary>
		public int DepthPerComponent
		{
			get
			{
				return _instance.depth_per_component;
			}
			set
			{
				_instance.depth_per_component = value;
			}
		}

		/// <summary>
		/// This can be true for black and white printers.
		/// </summary>
		public bool IsMonochrome
		{
			get
			{
				return _instance.is_monochrome != 0;
			}
			set
			{
				_instance.is_monochrome = value ? 1 : 0;
			}
		}

		/// <summary>
		/// This is set from the rcMonitor member of MONITORINFOEX, to whit:
		/// &quot;A RECT structure that specifies the display monitor rectangle,
		/// expressed in virtual-screen coordinates. Note that if the monitor
		/// is not the primary display monitor, some of the rectangle&apos;s
		/// coordinates may be negative values.&quot;
		/// The |rect| and |available_rect| properties are used to determine the
		/// available surface for rendering popup views.
		/// </summary>
		public CefRect Rect
		{
			get
			{
				return _instance.rect;
			}
			set
			{
				_instance.rect = value;
			}
		}

		/// <summary>
		/// This is set from the rcWork member of MONITORINFOEX, to whit:
		/// &quot;A RECT structure that specifies the work area rectangle of the
		/// display monitor that can be used by applications, expressed in
		/// virtual-screen coordinates. Windows uses this rectangle to
		/// maximize an application on the monitor. The rest of the area in
		/// rcMonitor contains system windows such as the task bar and side
		/// bars. Note that if the monitor is not the primary display monitor,
		/// some of the rectangle&apos;s coordinates may be negative values&quot;.
		/// The |rect| and |available_rect| properties are used to determine the
		/// available surface for rendering popup views.
		/// </summary>
		public CefRect AvailableRect
		{
			get
			{
				return _instance.available_rect;
			}
			set
			{
				_instance.available_rect = value;
			}
		}

		public static implicit operator CefScreenInfo(cef_screen_info_t instance)
		{
			return new CefScreenInfo { _instance = instance };
		}

		public static implicit operator cef_screen_info_t(CefScreenInfo instance)
		{
			return instance._instance;
		}
	}
}
