// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_domvisitor_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Structure to implement for visiting the DOM. The functions of this structure
	/// will be called on the render process main thread.
	/// </summary>
	/// <remarks>
	/// Role: Handler
	/// </remarks>
	public unsafe partial class CefDOMVisitor : CefBaseRefCounted<cef_domvisitor_t>, ICefDOMVisitorPrivate
	{
#if NET_LESS_5_0
		private static readonly VisitDelegate fnVisit = VisitImpl;

#endif // NET_LESS_5_0
		internal static unsafe CefDOMVisitor Create(IntPtr instance)
		{
			return new CefDOMVisitor((cef_domvisitor_t*)instance);
		}

		public CefDOMVisitor()
		{
			cef_domvisitor_t* self = this.NativeInstance;
			#if NET_LESS_5_0
			self->visit = (void*)Marshal.GetFunctionPointerForDelegate(fnVisit);
			#else
			self->visit = (delegate* unmanaged[Stdcall]<cef_domvisitor_t*, cef_domdocument_t*, void>)&VisitImpl;
			#endif
		}

		public CefDOMVisitor(cef_domvisitor_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		[MethodImpl(MethodImplOptions.ForwardRef)]
		extern bool ICefDOMVisitorPrivate.AvoidVisit();

		/// <summary>
		/// Method executed for visiting the DOM. The document object passed to this
		/// function represents a snapshot of the DOM at the time this function is
		/// executed. DOM objects are only valid for the scope of this function. Do not
		/// keep references to or attempt to access any DOM objects outside the scope
		/// of this function.
		/// </summary>
		protected internal unsafe virtual void Visit(CefDOMDocument document)
		{
		}

#if NET_LESS_5_0
		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private unsafe delegate void VisitDelegate(cef_domvisitor_t* self, cef_domdocument_t* document);

#endif // NET_LESS_5_0
		// void (*)(_cef_domvisitor_t* self, _cef_domdocument_t* document)*
#if !NET_LESS_5_0
		[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
#endif
		private static unsafe void VisitImpl(cef_domvisitor_t* self, cef_domdocument_t* document)
		{
			var instance = GetInstance((IntPtr)self) as CefDOMVisitor;
			if (instance == null || ((ICefDOMVisitorPrivate)instance).AvoidVisit())
			{
				ReleaseIfNonNull((cef_base_ref_counted_t*)document);
				return;
			}
			instance.Visit(CefDOMDocument.Wrap(CefDOMDocument.Create, document));
		}
	}
}
