// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_binary_value_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Structure representing a binary value. Can be used on any process and thread.
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial class CefBinaryValue : CefBaseRefCounted<cef_binary_value_t>
	{
		internal static unsafe CefBinaryValue Create(IntPtr instance)
		{
			return new CefBinaryValue((cef_binary_value_t*)instance);
		}

		public CefBinaryValue(cef_binary_value_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		/// <summary>
		/// Gets a value indicating whether this object is valid. This object may become invalid if
		/// the underlying data is owned by another object (e.g. list or dictionary)
		/// and that other object is then modified or destroyed. Do not call any other
		/// functions if this property returns false.
		/// </summary>
		public unsafe virtual bool IsValid
		{
			get
			{
				return SafeCall(NativeInstance->IsValid() != 0);
			}
		}

		/// <summary>
		/// Gets a value indicating whether this object is currently owned by another object.
		/// </summary>
		public unsafe virtual bool IsOwned
		{
			get
			{
				return SafeCall(NativeInstance->IsOwned() != 0);
			}
		}

		/// <summary>
		/// Gets the data size.
		/// </summary>
		public unsafe virtual long Size
		{
			get
			{
				return SafeCall((long)NativeInstance->GetSize());
			}
		}

		/// <summary>
		/// Returns true (1) if this object and |that| object have the same underlying
		/// data.
		/// </summary>
		public unsafe virtual bool IsSame(CefBinaryValue that)
		{
			return SafeCall(NativeInstance->IsSame((that != null) ? that.GetNativeInstance() : null) != 0);
		}

		/// <summary>
		/// Returns true (1) if this object and |that| object have an equivalent
		/// underlying value but are not necessarily the same object.
		/// </summary>
		public unsafe virtual bool IsEqual(CefBinaryValue that)
		{
			return SafeCall(NativeInstance->IsEqual((that != null) ? that.GetNativeInstance() : null) != 0);
		}

		/// <summary>
		/// Returns a copy of this object. The data in this object will also be copied.
		/// </summary>
		public unsafe virtual CefBinaryValue Copy()
		{
			return SafeCall(CefBinaryValue.Wrap(CefBinaryValue.Create, NativeInstance->Copy()));
		}

		/// <summary>
		/// Read up to |buffer_size| number of bytes into |buffer|. Reading begins at
		/// the specified byte |data_offset|. Returns the number of bytes read.
		/// </summary>
		public unsafe virtual long GetData(IntPtr buffer, long bufferSize, long dataOffset)
		{
			return SafeCall((long)NativeInstance->GetData((void*)buffer, new UIntPtr((ulong)bufferSize), new UIntPtr((ulong)dataOffset)));
		}
	}
}
