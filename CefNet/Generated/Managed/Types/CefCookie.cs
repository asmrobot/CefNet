// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_cookie_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Cookie information.
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial struct CefCookie : IDisposable
	{
		private cef_cookie_t _instance;

		/// <summary>
		/// The cookie name.
		/// </summary>
		public string Name
		{
			get
			{
				fixed (cef_string_t* s = &_instance.name)
				{
					return CefString.Read(s);
				}
			}
			set
			{
				fixed (cef_string_t* s = &_instance.name)
				{
					CefString.Replace(s, value);
				}
			}
		}

		/// <summary>
		/// The cookie value.
		/// </summary>
		public string Value
		{
			get
			{
				fixed (cef_string_t* s = &_instance.value)
				{
					return CefString.Read(s);
				}
			}
			set
			{
				fixed (cef_string_t* s = &_instance.value)
				{
					CefString.Replace(s, value);
				}
			}
		}

		/// <summary>
		/// If |domain| is empty a host cookie will be created instead of a domain
		/// cookie. Domain cookies are stored with a leading &quot;.&quot; and are visible to
		/// sub-domains whereas host cookies are not.
		/// </summary>
		public string Domain
		{
			get
			{
				fixed (cef_string_t* s = &_instance.domain)
				{
					return CefString.Read(s);
				}
			}
			set
			{
				fixed (cef_string_t* s = &_instance.domain)
				{
					CefString.Replace(s, value);
				}
			}
		}

		/// <summary>
		/// If |path| is non-empty only URLs at or below the path will get the cookie
		/// value.
		/// </summary>
		public string Path
		{
			get
			{
				fixed (cef_string_t* s = &_instance.path)
				{
					return CefString.Read(s);
				}
			}
			set
			{
				fixed (cef_string_t* s = &_instance.path)
				{
					CefString.Replace(s, value);
				}
			}
		}

		/// <summary>
		/// If |secure| is true the cookie will only be sent for HTTPS requests.
		/// </summary>
		public bool Secure
		{
			get
			{
				return _instance.secure != 0;
			}
			set
			{
				_instance.secure = value ? 1 : 0;
			}
		}

		/// <summary>
		/// If |httponly| is true the cookie will only be sent for HTTP requests.
		/// </summary>
		public bool HttpOnly
		{
			get
			{
				return _instance.httponly != 0;
			}
			set
			{
				_instance.httponly = value ? 1 : 0;
			}
		}

		/// <summary>
		/// The cookie creation date. This is automatically populated by the system on
		/// cookie creation.
		/// </summary>
		public CefTime Creation
		{
			get
			{
				return _instance.creation;
			}
			set
			{
				_instance.creation = value;
			}
		}

		/// <summary>
		/// The cookie last access date. This is automatically populated by the system
		/// on access.
		/// </summary>
		public CefTime LastAccess
		{
			get
			{
				return _instance.last_access;
			}
			set
			{
				_instance.last_access = value;
			}
		}

		/// <summary>
		/// The cookie expiration date is only valid if |has_expires| is true.
		/// </summary>
		public bool HasExpires
		{
			get
			{
				return _instance.has_expires != 0;
			}
			set
			{
				_instance.has_expires = value ? 1 : 0;
			}
		}

		public CefTime Expires
		{
			get
			{
				return _instance.expires;
			}
			set
			{
				_instance.expires = value;
			}
		}

		/// <summary>
		/// Same site.
		/// </summary>
		public CefCookieSameSite SameSite
		{
			get
			{
				return _instance.same_site;
			}
			set
			{
				_instance.same_site = value;
			}
		}

		/// <summary>
		/// Priority.
		/// </summary>
		public CefCookiePriority Priority
		{
			get
			{
				return _instance.priority;
			}
			set
			{
				_instance.priority = value;
			}
		}

		public void Dispose()
		{
			Name = null;
			Value = null;
			Domain = null;
			Path = null;
		}

		public static implicit operator CefCookie(cef_cookie_t instance)
		{
			return new CefCookie { _instance = instance };
		}

		public static implicit operator cef_cookie_t(CefCookie instance)
		{
			return instance._instance;
		}
	}
}
