// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_web_plugin_info_visitor_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Structure to implement for visiting web plugin information. The functions of
	/// this structure will be called on the browser process UI thread.
	/// </summary>
	/// <remarks>
	/// Role: Handler
	/// </remarks>
	public unsafe partial class CefWebPluginInfoVisitor : CefBaseRefCounted<cef_web_plugin_info_visitor_t>, ICefWebPluginInfoVisitorPrivate
	{
#if NET_LESS_5_0
		private static readonly VisitDelegate fnVisit = VisitImpl;

#endif // NET_LESS_5_0
		internal static unsafe CefWebPluginInfoVisitor Create(IntPtr instance)
		{
			return new CefWebPluginInfoVisitor((cef_web_plugin_info_visitor_t*)instance);
		}

		public CefWebPluginInfoVisitor()
		{
			cef_web_plugin_info_visitor_t* self = this.NativeInstance;
			#if NET_LESS_5_0
			self->visit = (void*)Marshal.GetFunctionPointerForDelegate(fnVisit);
			#else
			self->visit = (delegate* unmanaged[Stdcall]<cef_web_plugin_info_visitor_t*, cef_web_plugin_info_t*, int, int, int>)&VisitImpl;
			#endif
		}

		public CefWebPluginInfoVisitor(cef_web_plugin_info_visitor_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		[MethodImpl(MethodImplOptions.ForwardRef)]
		extern bool ICefWebPluginInfoVisitorPrivate.AvoidVisit();

		/// <summary>
		/// Method that will be called once for each plugin. |count| is the 0-based
		/// index for the current plugin. |total| is the total number of plugins.
		/// Return false (0) to stop visiting plugins. This function may never be
		/// called if no plugins are found.
		/// </summary>
		protected internal unsafe virtual bool Visit(CefWebPluginInfo info, int count, int total)
		{
			return default;
		}

#if NET_LESS_5_0
		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private unsafe delegate int VisitDelegate(cef_web_plugin_info_visitor_t* self, cef_web_plugin_info_t* info, int count, int total);

#endif // NET_LESS_5_0
		// int (*)(_cef_web_plugin_info_visitor_t* self, _cef_web_plugin_info_t* info, int count, int total)*
#if !NET_LESS_5_0
		[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
#endif
		private static unsafe int VisitImpl(cef_web_plugin_info_visitor_t* self, cef_web_plugin_info_t* info, int count, int total)
		{
			var instance = GetInstance((IntPtr)self) as CefWebPluginInfoVisitor;
			if (instance == null || ((ICefWebPluginInfoVisitorPrivate)instance).AvoidVisit())
			{
				ReleaseIfNonNull((cef_base_ref_counted_t*)info);
				return default;
			}
			return instance.Visit(CefWebPluginInfo.Wrap(CefWebPluginInfo.Create, info), count, total) ? 1 : 0;
		}
	}
}
