// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_urlparts_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// URL component parts.
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial struct CefUrlParts : IDisposable
	{
		private cef_urlparts_t _instance;

		/// <summary>
		/// The complete URL specification.
		/// </summary>
		public string Spec
		{
			get
			{
				fixed (cef_string_t* s = &_instance.spec)
				{
					return CefString.Read(s);
				}
			}
			set
			{
				fixed (cef_string_t* s = &_instance.spec)
				{
					CefString.Replace(s, value);
				}
			}
		}

		/// <summary>
		/// Scheme component not including the colon (e.g., &quot;http&quot;).
		/// </summary>
		public string Scheme
		{
			get
			{
				fixed (cef_string_t* s = &_instance.scheme)
				{
					return CefString.Read(s);
				}
			}
			set
			{
				fixed (cef_string_t* s = &_instance.scheme)
				{
					CefString.Replace(s, value);
				}
			}
		}

		/// <summary>
		/// User name component.
		/// </summary>
		public string Username
		{
			get
			{
				fixed (cef_string_t* s = &_instance.username)
				{
					return CefString.Read(s);
				}
			}
			set
			{
				fixed (cef_string_t* s = &_instance.username)
				{
					CefString.Replace(s, value);
				}
			}
		}

		/// <summary>
		/// Password component.
		/// </summary>
		public string Password
		{
			get
			{
				fixed (cef_string_t* s = &_instance.password)
				{
					return CefString.Read(s);
				}
			}
			set
			{
				fixed (cef_string_t* s = &_instance.password)
				{
					CefString.Replace(s, value);
				}
			}
		}

		/// <summary>
		/// Host component. This may be a hostname, an IPv4 address or an IPv6 literal
		/// surrounded by square brackets (e.g., &quot;[2001:db8::1]&quot;).
		/// </summary>
		public string Host
		{
			get
			{
				fixed (cef_string_t* s = &_instance.host)
				{
					return CefString.Read(s);
				}
			}
			set
			{
				fixed (cef_string_t* s = &_instance.host)
				{
					CefString.Replace(s, value);
				}
			}
		}

		/// <summary>
		/// Port number component.
		/// </summary>
		public string Port
		{
			get
			{
				fixed (cef_string_t* s = &_instance.port)
				{
					return CefString.Read(s);
				}
			}
			set
			{
				fixed (cef_string_t* s = &_instance.port)
				{
					CefString.Replace(s, value);
				}
			}
		}

		/// <summary>
		/// Origin contains just the scheme, host, and port from a URL. Equivalent to
		/// clearing any username and password, replacing the path with a slash, and
		/// clearing everything after that. This value will be empty for non-standard
		/// URLs.
		/// </summary>
		public string Origin
		{
			get
			{
				fixed (cef_string_t* s = &_instance.origin)
				{
					return CefString.Read(s);
				}
			}
			set
			{
				fixed (cef_string_t* s = &_instance.origin)
				{
					CefString.Replace(s, value);
				}
			}
		}

		/// <summary>
		/// Path component including the first slash following the host.
		/// </summary>
		public string Path
		{
			get
			{
				fixed (cef_string_t* s = &_instance.path)
				{
					return CefString.Read(s);
				}
			}
			set
			{
				fixed (cef_string_t* s = &_instance.path)
				{
					CefString.Replace(s, value);
				}
			}
		}

		/// <summary>
		/// Query string component (i.e., everything following the &apos;?&apos;).
		/// </summary>
		public string Query
		{
			get
			{
				fixed (cef_string_t* s = &_instance.query)
				{
					return CefString.Read(s);
				}
			}
			set
			{
				fixed (cef_string_t* s = &_instance.query)
				{
					CefString.Replace(s, value);
				}
			}
		}

		/// <summary>
		/// Fragment (hash) identifier component (i.e., the string following the &apos;#&apos;).
		/// </summary>
		public string Fragment
		{
			get
			{
				fixed (cef_string_t* s = &_instance.fragment)
				{
					return CefString.Read(s);
				}
			}
			set
			{
				fixed (cef_string_t* s = &_instance.fragment)
				{
					CefString.Replace(s, value);
				}
			}
		}

		public void Dispose()
		{
			Spec = null;
			Scheme = null;
			Username = null;
			Password = null;
			Host = null;
			Port = null;
			Origin = null;
			Path = null;
			Query = null;
			Fragment = null;
		}

		public static implicit operator CefUrlParts(cef_urlparts_t instance)
		{
			return new CefUrlParts { _instance = instance };
		}

		public static implicit operator cef_urlparts_t(CefUrlParts instance)
		{
			return instance._instance;
		}
	}
}
